Help on package paramiko:

NNAAMMEE
    paramiko

FFIILLEE
    /usr/lib/python2.7/dist-packages/paramiko/__init__.py

DDEESSCCRRIIPPTTIIOONN
    # Copyright (C) 2003-2011  Robey Pointer <robeypointer@gmail.com>
    #
    # This file is part of paramiko.
    #
    # Paramiko is free software; you can redistribute it and/or modify it under the
    # terms of the GNU Lesser General Public License as published by the Free
    # Software Foundation; either version 2.1 of the License, or (at your option)
    # any later version.
    #
    # Paramiko is distributed in the hope that it will be useful, but WITHOUT ANY
    # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
    # A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
    # details.
    #
    # You should have received a copy of the GNU Lesser General Public License
    # along with Paramiko; if not, write to the Free Software Foundation, Inc.,
    # 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    _version
    _winapi
    agent
    auth_handler
    ber
    buffered_pipe
    channel
    client
    common
    compress
    config
    dsskey
    ecdsakey
    file
    hostkeys
    kex_gex
    kex_group1
    kex_group14
    kex_gss
    message
    packet
    pipe
    pkey
    primes
    proxy
    py3compat
    resource
    rsakey
    server
    sftp
    sftp_attr
    sftp_client
    sftp_file
    sftp_handle
    sftp_server
    sftp_si
    ssh_exception
    ssh_gss
    transport
    util
    win_pageant

CCLLAASSSSEESS
    __builtin__.object
        paramiko.client.MissingHostKeyPolicy
            paramiko.client.AutoAddPolicy
            paramiko.client.RejectPolicy
            paramiko.client.WarningPolicy
        paramiko.config.SSHConfig
        paramiko.message.Message
        paramiko.pkey.PKey
            paramiko.agent.AgentKey
            paramiko.dsskey.DSSKey
            paramiko.rsakey.RSAKey
        paramiko.server.ServerInterface
        paramiko.sftp_attr.SFTPAttributes
        paramiko.sftp_si.SFTPServerInterface
        paramiko.transport.SecurityOptions
    _abcoll.MutableMapping(_abcoll.Mapping)
        paramiko.hostkeys.HostKeys
    exceptions.Exception(exceptions.BaseException)
        paramiko.sftp.SFTPError
        paramiko.ssh_exception.SSHException
            paramiko.ssh_exception.AuthenticationException
                paramiko.ssh_exception.BadAuthenticationType
                paramiko.ssh_exception.PasswordRequiredException
            paramiko.ssh_exception.BadHostKeyException
            paramiko.ssh_exception.ChannelException
            paramiko.ssh_exception.ProxyCommandFailure
    paramiko.agent.AgentSSH(__builtin__.object)
        paramiko.agent.Agent
    paramiko.sftp.BaseSFTP(__builtin__.object)
        paramiko.sftp_client.SFTPClient(paramiko.sftp.BaseSFTP, paramiko.util.ClosingContextManager)
            paramiko.sftp_client.SFTP
        paramiko.sftp_server.SFTPServer(paramiko.sftp.BaseSFTP, paramiko.server.SubsystemHandler)
    paramiko.util.ClosingContextManager(__builtin__.object)
        paramiko.channel.Channel
        paramiko.client.SSHClient
        paramiko.file.BufferedFile
            paramiko.sftp_file.SFTPFile
        paramiko.proxy.ProxyCommand
        paramiko.sftp_client.SFTPClient(paramiko.sftp.BaseSFTP, paramiko.util.ClosingContextManager)
            paramiko.sftp_client.SFTP
        paramiko.sftp_handle.SFTPHandle
        paramiko.transport.Transport(threading.Thread, paramiko.util.ClosingContextManager)
    threading.Thread(threading._Verbose)
        paramiko.server.SubsystemHandler
            paramiko.sftp_server.SFTPServer(paramiko.sftp.BaseSFTP, paramiko.server.SubsystemHandler)
        paramiko.transport.Transport(threading.Thread, paramiko.util.ClosingContextManager)
    
    class AAggeenntt(AgentSSH)
     |  Client interface for using private keys from an SSH agent running on the
     |  local machine.  If an SSH agent is running, this class can be used to
     |  connect to it and retreive `.PKey` objects which can be used when
     |  attempting to authenticate to remote SSH servers.
     |  
     |  Upon initialization, a session with the local machine's SSH agent is
     |  opened, if one is running. If no agent is running, initialization will
     |  succeed, but `get_keys` will return an empty tuple.
     |  
     |  :raises SSHException:
     |      if an SSH agent is found, but speaks an incompatible protocol
     |  
     |  Method resolution order:
     |      Agent
     |      AgentSSH
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |  
     |  cclloossee(self)
     |      Close the SSH agent connection.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from AgentSSH:
     |  
     |  ggeett__kkeeyyss(self)
     |      Return the list of keys available through the SSH agent, if any.  If
     |      no SSH agent was running (or it couldn't be contacted), an empty list
     |      will be returned.
     |      
     |      :return:
     |          a tuple of `.AgentKey` objects representing keys available on the
     |          SSH agent
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from AgentSSH:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class AAggeennttKKeeyy(paramiko.pkey.PKey)
     |  Private key held in a local SSH agent.  This type of key can be used for
     |  authenticating to a remote server (signing).  Most other key operations
     |  work as expected.
     |  
     |  Method resolution order:
     |      AgentKey
     |      paramiko.pkey.PKey
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, agent, blob)
     |  
     |  ____ssttrr____(self)
     |  
     |  aassbbyytteess(self)
     |  
     |  ggeett__nnaammee(self)
     |  
     |  ssiiggnn__sssshh__ddaattaa(self, data)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.pkey.PKey:
     |  
     |  ____ccmmpp____(self, other)
     |      Compare this key to another.  Returns 0 if this key is equivalent to
     |      the given key, or non-0 if they are different.  Only the public parts
     |      of the key are compared, so a public key will compare equal to its
     |      corresponding private key.
     |      
     |      :param .Pkey other: key to compare to.
     |  
     |  ____eeqq____(self, other)
     |  
     |  ccaann__ssiiggnn(self)
     |      Return ``True`` if this key has the private part necessary for signing
     |      data.
     |  
     |  ggeett__bbaassee6644(self)
     |      Return a base64 string containing the public part of this key.  Nothing
     |      secret is revealed.  This format is compatible with that used to store
     |      public key files or recognized host keys.
     |      
     |      :return: a base64 `string <str>` containing the public part of the key.
     |  
     |  ggeett__bbiittss(self)
     |      Return the number of significant bits in this key.  This is useful
     |      for judging the relative security of a key.
     |      
     |      :return: bits in the key (as an `int`)
     |  
     |  ggeett__ffiinnggeerrpprriinntt(self)
     |      Return an MD5 fingerprint of the public part of this key.  Nothing
     |      secret is revealed.
     |      
     |      :return:
     |          a 16-byte `string <str>` (binary) of the MD5 fingerprint, in SSH
     |          format.
     |  
     |  vveerriiffyy__sssshh__ssiigg(self, data, msg)
     |      Given a blob of data, and an SSH message representing a signature of
     |      that data, verify that it was signed with this key.
     |      
     |      :param str data: the data that was signed.
     |      :param .Message msg: an SSH signature message
     |      :return:
     |          ``True`` if the signature verifies correctly; ``False`` otherwise.
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy(self, file_obj, password=None)
     |      Write private key contents into a file (or file-like) object.  If the
     |      password is not ``None``, the key is encrypted before writing.
     |      
     |      :param file_obj: the file-like object to write into
     |      :param str password: an optional password to use to encrypt the key
     |      
     |      :raises IOError: if there was an error writing to the file
     |      :raises SSHException: if the key is invalid
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy__ffiillee(self, filename, password=None)
     |      Write private key contents into a file.  If the password is not
     |      ``None``, the key is encrypted before writing.
     |      
     |      :param str filename: name of the file to write
     |      :param str password:
     |          an optional password to use to encrypt the key file
     |      
     |      :raises IOError: if there was an error writing the file
     |      :raises SSHException: if the key is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from paramiko.pkey.PKey:
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy(cls, file_obj, password=None) from __builtin__.type
     |      Create a key object by reading a private key from a file (or file-like)
     |      object.  If the private key is encrypted and ``password`` is not
     |      ``None``, the given password will be used to decrypt the key (otherwise
     |      `.PasswordRequiredException` is thrown).
     |      
     |      :param file_obj: the file-like object to read from
     |      :param str password:
     |          an optional password to use to decrypt the key, if it's encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the key
     |      :raises PasswordRequiredException:
     |          if the private key file is encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy__ffiillee(cls, filename, password=None) from __builtin__.type
     |      Create a key object by reading a private key file.  If the private
     |      key is encrypted and ``password`` is not ``None``, the given password
     |      will be used to decrypt the key (otherwise `.PasswordRequiredException`
     |      is thrown).  Through the magic of Python, this factory method will
     |      exist in all subclasses of PKey (such as `.RSAKey` or `.DSSKey`), but
     |      is useless on the abstract PKey class.
     |      
     |      :param str filename: name of the file to read
     |      :param str password:
     |          an optional password to use to decrypt the key file, if it's
     |          encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the file
     |      :raises PasswordRequiredException: if the private key file is
     |          encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.pkey.PKey:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class AAuutthheennttiiccaattiioonnEExxcceeppttiioonn(SSHException)
     |  Exception raised when authentication failed for some reason.  It may be
     |  possible to retry with different credentials.  (Other classes specify more
     |  specific reasons.)
     |  
     |  .. versionadded:: 1.6
     |  
     |  Method resolution order:
     |      AuthenticationException
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class AAuuttooAAddddPPoolliiccyy(MissingHostKeyPolicy)
     |  Policy for automatically adding the hostname and new host key to the
     |  local `.HostKeys` object, and saving it.  This is used by `.SSHClient`.
     |  
     |  Method resolution order:
     |      AutoAddPolicy
     |      MissingHostKeyPolicy
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  mmiissssiinngg__hhoosstt__kkeeyy(self, client, hostname, key)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MissingHostKeyPolicy:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class BBaaddAAuutthheennttiiccaattiioonnTTyyppee(AuthenticationException)
     |  Exception raised when an authentication type (like password) is used, but
     |  the server isn't allowing that type.  (It may only allow public-key, for
     |  example.)
     |  
     |  :ivar list allowed_types:
     |      list of allowed authentication types provided by the server (possible
     |      values are: ``"none"``, ``"password"``, and ``"publickey"``).
     |  
     |  .. versionadded:: 1.1
     |  
     |  Method resolution order:
     |      BadAuthenticationType
     |      AuthenticationException
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, explanation, types)
     |  
     |  ____ssttrr____(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  aalllloowweedd__ttyyppeess = []
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class BBaaddHHoossttKKeeyyEExxcceeppttiioonn(SSHException)
     |  The host key given by the SSH server did not match what we were expecting.
     |  
     |  :ivar str hostname: the hostname of the SSH server
     |  :ivar PKey got_key: the host key presented by the server
     |  :ivar PKey expected_key: the host key expected
     |  
     |  .. versionadded:: 1.6
     |  
     |  Method resolution order:
     |      BadHostKeyException
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, hostname, got_key, expected_key)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class BBuuffffeerreeddFFiillee(paramiko.util.ClosingContextManager)
     |  Reusable base class to implement Python-style file buffering around a
     |  simpler stream.
     |  
     |  Method resolution order:
     |      BufferedFile
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self)
     |  
     |  ____iitteerr____(self)
     |      Returns an iterator that can be used to iterate over the lines in this
     |      file.  This iterator happens to return the file itself, since a file is
     |      its own iterator.
     |      
     |      :raises ValueError: if the file is closed.
     |  
     |  cclloossee(self)
     |      Close the file.  Future read and write operations will fail.
     |  
     |  fflluusshh(self)
     |      Write out any data in the write buffer.  This may do nothing if write
     |      buffering is not turned on.
     |  
     |  nneexxtt(self)
     |      Returns the next line from the input, or raises
     |      `~exceptions.StopIteration` when EOF is hit.  Unlike Python file
     |      objects, it's okay to mix calls to `next` and `readline`.
     |      
     |      :raises StopIteration: when the end of the file is reached.
     |      
     |      :return: a line (`str`) read from the file.
     |  
     |  rreeaadd(self, size=None)
     |      Read at most ``size`` bytes from the file (less if we hit the end of the
     |      file first).  If the ``size`` argument is negative or omitted, read all
     |      the remaining data in the file.
     |      
     |      .. note::
     |          ``'b'`` mode flag is ignored (``self.FLAG_BINARY`` in
     |          ``self._flags``), because SSH treats all files as binary, since we
     |          have no idea what encoding the file is in, or even if the file is
     |          text data.
     |      
     |      :param int size: maximum number of bytes to read
     |      :return:
     |          data read from the file (as bytes), or an empty string if EOF was
     |          encountered immediately
     |  
     |  rreeaaddlliinnee(self, size=None)
     |      Read one entire line from the file.  A trailing newline character is
     |      kept in the string (but may be absent when a file ends with an
     |      incomplete line).  If the size argument is present and non-negative, it
     |      is a maximum byte count (including the trailing newline) and an
     |      incomplete line may be returned.  An empty string is returned only when
     |      EOF is encountered immediately.
     |      
     |      .. note::
     |          Unlike stdio's ``fgets``, the returned string contains null
     |          characters (``'\0'``) if they occurred in the input.
     |      
     |      :param int size: maximum length of returned string.
     |      :return:
     |          next line of the file, or an empty string if the end of the
     |          file has been reached.
     |      
     |          If the file was opened in binary (``'b'``) mode: bytes are returned
     |          Else: the encoding of the file is assumed to be UTF-8 and character
     |          strings (`str`) are returned
     |  
     |  rreeaaddlliinneess(self, sizehint=None)
     |      Read all remaining lines using `readline` and return them as a list.
     |      If the optional ``sizehint`` argument is present, instead of reading up
     |      to EOF, whole lines totalling approximately sizehint bytes (possibly
     |      after rounding up to an internal buffer size) are read.
     |      
     |      :param int sizehint: desired maximum number of bytes to read.
     |      :return: `list` of lines read from the file.
     |  
     |  sseeeekk(self, offset, whence=0)
     |      Set the file's current position, like stdio's ``fseek``.  Not all file
     |      objects support seeking.
     |      
     |      .. note::
     |          If a file is opened in append mode (``'a'`` or ``'a+'``), any seek
     |          operations will be undone at the next write (as the file position
     |          will move back to the end of the file).
     |      
     |      :param int offset:
     |          position to move to within the file, relative to ``whence``.
     |      :param int whence:
     |          type of movement: 0 = absolute; 1 = relative to the current
     |          position; 2 = relative to the end of the file.
     |      
     |      :raises IOError: if the file doesn't support random access.
     |  
     |  tteellll(self)
     |      Return the file's current position.  This may not be accurate or
     |      useful if the underlying file doesn't support random access, or was
     |      opened in append mode.
     |      
     |      :return: file position (`number <int>` of bytes).
     |  
     |  wwrriittee(self, data)
     |      Write data to the file.  If write buffering is on (``bufsize`` was
     |      specified and non-zero), some or all of the data may not actually be
     |      written yet.  (Use `flush` or `close` to force buffered data to be
     |      written out.)
     |      
     |      :param str data: data to write
     |  
     |  wwrriitteelliinneess(self, sequence)
     |      Write a sequence of strings to the file.  The sequence can be any
     |      iterable object producing strings, typically a list of strings.  (The
     |      name is intended to match `readlines`; `writelines` does not add line
     |      separators.)
     |      
     |      :param iterable sequence: an iterable sequence of strings.
     |  
     |  xxrreeaaddlliinneess(self)
     |      Identical to ``iter(f)``.  This is a deprecated file interface that
     |      predates Python iterator support.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cclloosseedd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  FFLLAAGG__AAPPPPEENNDD = 4
     |  
     |  FFLLAAGG__BBIINNAARRYY = 16
     |  
     |  FFLLAAGG__BBUUFFFFEERREEDD = 32
     |  
     |  FFLLAAGG__LLIINNEE__BBUUFFFFEERREEDD = 64
     |  
     |  FFLLAAGG__RREEAADD = 1
     |  
     |  FFLLAAGG__UUNNIIVVEERRSSAALL__NNEEWWLLIINNEE = 128
     |  
     |  FFLLAAGG__WWRRIITTEE = 2
     |  
     |  SSEEEEKK__CCUURR = 1
     |  
     |  SSEEEEKK__EENNDD = 2
     |  
     |  SSEEEEKK__SSEETT = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CChhaannnneell(paramiko.util.ClosingContextManager)
     |  A secure tunnel across an SSH `.Transport`.  A Channel is meant to behave
     |  like a socket, and has an API that should be indistinguishable from the
     |  Python socket API.
     |  
     |  Because SSH2 has a windowing kind of flow control, if you stop reading data
     |  from a Channel and its buffer fills up, the server will be unable to send
     |  you any more data until you read some of it.  (This won't affect other
     |  channels on the same transport -- all channels on a single transport are
     |  flow-controlled independently.)  Similarly, if the server isn't reading
     |  data you send, calls to `send` may block, unless you set a timeout.  This
     |  is exactly like a normal network socket, so it shouldn't be too surprising.
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  Method resolution order:
     |      Channel
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, chanid)
     |      Create a new channel.  The channel is not associated with any
     |      particular session or `.Transport` until the Transport attaches it.
     |      Normally you would only call this method from the constructor of a
     |      subclass of `.Channel`.
     |      
     |      :param int chanid:
     |          the ID of this channel, as passed by an existing `.Transport`.
     |  
     |  ____rreepprr____(self)
     |      Return a string representation of this object, for debugging.
     |  
     |  cclloossee(self)
     |      Close the channel.  All future read/write operations on the channel
     |      will fail.  The remote end will receive no more data (after queued data
     |      is flushed).  Channels are automatically closed when their `.Transport`
     |      is closed or when they are garbage collected.
     |  
     |  eexxeecc__ccoommmmaanndd(self, *args, **kwds)
     |      Execute a command on the server.  If the server allows it, the channel
     |      will then be directly connected to the stdin, stdout, and stderr of
     |      the command being executed.
     |      
     |      When the command finishes executing, the channel will be closed and
     |      can't be reused.  You must open a new channel if you wish to execute
     |      another command.
     |      
     |      :param str command: a shell command to execute.
     |      
     |      :raises SSHException: if the request was rejected or the channel was
     |          closed
     |  
     |  eexxiitt__ssttaattuuss__rreeaaddyy(self)
     |      Return true if the remote process has exited and returned an exit
     |      status. You may use this to poll the process status if you don't
     |      want to block in `recv_exit_status`. Note that the server may not
     |      return an exit status in some cases (like bad servers).
     |      
     |      :return:
     |          ``True`` if `recv_exit_status` will return immediately, else ``False``.
     |      
     |      .. versionadded:: 1.7.3
     |  
     |  ffiilleennoo(self)
     |      Returns an OS-level file descriptor which can be used for polling, but
     |      but not for reading or writing.  This is primarily to allow Python's
     |      ``select`` module to work.
     |      
     |      The first time ``fileno`` is called on a channel, a pipe is created to
     |      simulate real OS-level file descriptor (FD) behavior.  Because of this,
     |      two OS-level FDs are created, which will use up FDs faster than normal.
     |      (You won't notice this effect unless you have hundreds of channels
     |      open at the same time.)
     |      
     |      :return: an OS-level file descriptor (`int`)
     |      
     |      .. warning::
     |          This method causes channel reads to be slightly less efficient.
     |  
     |  ggeett__iidd(self)
     |      Return the `int` ID # for this channel.
     |      
     |      The channel ID is unique across a `.Transport` and usually a small
     |      number.  It's also the number passed to
     |      `.ServerInterface.check_channel_request` when determining whether to
     |      accept a channel request in server mode.
     |  
     |  ggeett__nnaammee(self)
     |      Get the name of this channel that was previously set by `set_name`.
     |  
     |  ggeett__ppttyy(self, *args, **kwds)
     |      Request a pseudo-terminal from the server.  This is usually used right
     |      after creating a client channel, to ask the server to provide some
     |      basic terminal semantics for a shell invoked with `invoke_shell`.
     |      It isn't necessary (or desirable) to call this method if you're going
     |      to exectue a single command with `exec_command`.
     |      
     |      :param str term: the terminal type to emulate (for example, ``'vt100'``)
     |      :param int width: width (in characters) of the terminal screen
     |      :param int height: height (in characters) of the terminal screen
     |      :param int width_pixels: width (in pixels) of the terminal screen
     |      :param int height_pixels: height (in pixels) of the terminal screen
     |      
     |      :raises SSHException:
     |          if the request was rejected or the channel was closed
     |  
     |  ggeett__ttrraannssppoorrtt(self)
     |      Return the `.Transport` associated with this channel.
     |  
     |  ggeettppeeeerrnnaammee(self)
     |      Return the address of the remote side of this Channel, if possible.
     |      
     |      This simply wraps `.Transport.getpeername`, used to provide enough of a
     |      socket-like interface to allow asyncore to work. (asyncore likes to
     |      call ``'getpeername'``.)
     |  
     |  ggeettttiimmeeoouutt(self)
     |      Returns the timeout in seconds (as a float) associated with socket
     |      operations, or ``None`` if no timeout is set.  This reflects the last
     |      call to `setblocking` or `settimeout`.
     |  
     |  iinnvvookkee__sshheellll(self, *args, **kwds)
     |      Request an interactive shell session on this channel.  If the server
     |      allows it, the channel will then be directly connected to the stdin,
     |      stdout, and stderr of the shell.
     |      
     |      Normally you would call `get_pty` before this, in which case the
     |      shell will operate through the pty, and the channel will be connected
     |      to the stdin and stdout of the pty.
     |      
     |      When the shell exits, the channel will be closed and can't be reused.
     |      You must open a new channel if you wish to open another shell.
     |      
     |      :raises SSHException: if the request was rejected or the channel was
     |          closed
     |  
     |  iinnvvookkee__ssuubbssyysstteemm(self, *args, **kwds)
     |      Request a subsystem on the server (for example, ``sftp``).  If the
     |      server allows it, the channel will then be directly connected to the
     |      requested subsystem.
     |      
     |      When the subsystem finishes, the channel will be closed and can't be
     |      reused.
     |      
     |      :param str subsystem: name of the subsystem being requested.
     |      
     |      :raises SSHException:
     |          if the request was rejected or the channel was closed
     |  
     |  mmaakkeeffiillee(self, *params)
     |      Return a file-like object associated with this channel.  The optional
     |      ``mode`` and ``bufsize`` arguments are interpreted the same way as by
     |      the built-in ``file()`` function in Python.
     |      
     |      :return: `.ChannelFile` object which can be used for Python file I/O.
     |  
     |  mmaakkeeffiillee__ssttddeerrrr(self, *params)
     |      Return a file-like object associated with this channel's stderr
     |      stream.   Only channels using `exec_command` or `invoke_shell`
     |      without a pty will ever have data on the stderr stream.
     |      
     |      The optional ``mode`` and ``bufsize`` arguments are interpreted the
     |      same way as by the built-in ``file()`` function in Python.  For a
     |      client, it only makes sense to open this file for reading.  For a
     |      server, it only makes sense to open this file for writing.
     |      
     |      :return: `.ChannelFile` object which can be used for Python file I/O.
     |      
     |      .. versionadded:: 1.1
     |  
     |  rreeccvv(self, nbytes)
     |      Receive data from the channel.  The return value is a string
     |      representing the data received.  The maximum amount of data to be
     |      received at once is specified by ``nbytes``.  If a string of length zero
     |      is returned, the channel stream has closed.
     |      
     |      :param int nbytes: maximum number of bytes to read.
     |      :return: received data, as a `bytes`
     |      
     |      :raises socket.timeout:
     |          if no data is ready before the timeout set by `settimeout`.
     |  
     |  rreeccvv__eexxiitt__ssttaattuuss(self)
     |      Return the exit status from the process on the server.  This is
     |      mostly useful for retrieving the results of an `exec_command`.
     |      If the command hasn't finished yet, this method will wait until
     |      it does, or until the channel is closed.  If no exit status is
     |      provided by the server, -1 is returned.
     |      
     |      :return: the exit code (as an `int`) of the process on the server.
     |      
     |      .. versionadded:: 1.2
     |  
     |  rreeccvv__rreeaaddyy(self)
     |      Returns true if data is buffered and ready to be read from this
     |      channel.  A ``False`` result does not mean that the channel has closed;
     |      it means you may need to wait before more data arrives.
     |      
     |      :return:
     |          ``True`` if a `recv` call on this channel would immediately return
     |          at least one byte; ``False`` otherwise.
     |  
     |  rreeccvv__ssttddeerrrr(self, nbytes)
     |      Receive data from the channel's stderr stream.  Only channels using
     |      `exec_command` or `invoke_shell` without a pty will ever have data
     |      on the stderr stream.  The return value is a string representing the
     |      data received.  The maximum amount of data to be received at once is
     |      specified by ``nbytes``.  If a string of length zero is returned, the
     |      channel stream has closed.
     |      
     |      :param int nbytes: maximum number of bytes to read.
     |      :return: received data as a `str`
     |      
     |      :raises socket.timeout: if no data is ready before the timeout set by
     |          `settimeout`.
     |      
     |      .. versionadded:: 1.1
     |  
     |  rreeccvv__ssttddeerrrr__rreeaaddyy(self)
     |      Returns true if data is buffered and ready to be read from this
     |      channel's stderr stream.  Only channels using `exec_command` or
     |      `invoke_shell` without a pty will ever have data on the stderr
     |      stream.
     |      
     |      :return:
     |          ``True`` if a `recv_stderr` call on this channel would immediately
     |          return at least one byte; ``False`` otherwise.
     |      
     |      .. versionadded:: 1.1
     |  
     |  rreeqquueesstt__ffoorrwwaarrdd__aaggeenntt(self, *args, **kwds)
     |      Request for a forward SSH Agent on this channel.
     |      This is only valid for an ssh-agent from OpenSSH !!!
     |      
     |      :param function handler:
     |          a required handler to use for incoming SSH Agent connections
     |      
     |      :return: True if we are ok, else False (at that time we always return ok)
     |      
     |      :raises: SSHException in case of channel problem.
     |  
     |  rreeqquueesstt__xx1111(self, *args, **kwds)
     |      Request an x11 session on this channel.  If the server allows it,
     |      further x11 requests can be made from the server to the client,
     |      when an x11 application is run in a shell session.
     |      
     |      From :rfc:`4254`::
     |      
     |          It is RECOMMENDED that the 'x11 authentication cookie' that is
     |          sent be a fake, random cookie, and that the cookie be checked and
     |          replaced by the real cookie when a connection request is received.
     |      
     |      If you omit the auth_cookie, a new secure random 128-bit value will be
     |      generated, used, and returned.  You will need to use this value to
     |      verify incoming x11 requests and replace them with the actual local
     |      x11 cookie (which requires some knowledge of the x11 protocol).
     |      
     |      If a handler is passed in, the handler is called from another thread
     |      whenever a new x11 connection arrives.  The default handler queues up
     |      incoming x11 connections, which may be retrieved using
     |      `.Transport.accept`.  The handler's calling signature is::
     |      
     |          handler(channel: Channel, (address: str, port: int))
     |      
     |      :param int screen_number: the x11 screen number (0, 10, etc.)
     |      :param str auth_protocol:
     |          the name of the X11 authentication method used; if none is given,
     |          ``"MIT-MAGIC-COOKIE-1"`` is used
     |      :param str auth_cookie:
     |          hexadecimal string containing the x11 auth cookie; if none is
     |          given, a secure random 128-bit value is generated
     |      :param bool single_connection:
     |          if True, only a single x11 connection will be forwarded (by
     |          default, any number of x11 connections can arrive over this
     |          session)
     |      :param function handler:
     |          an optional handler to use for incoming X11 connections
     |      :return: the auth_cookie used
     |  
     |  rreessiizzee__ppttyy(self, *args, **kwds)
     |      Resize the pseudo-terminal.  This can be used to change the width and
     |      height of the terminal emulation created in a previous `get_pty` call.
     |      
     |      :param int width: new width (in characters) of the terminal screen
     |      :param int height: new height (in characters) of the terminal screen
     |      :param int width_pixels: new width (in pixels) of the terminal screen
     |      :param int height_pixels: new height (in pixels) of the terminal screen
     |      
     |      :raises SSHException:
     |          if the request was rejected or the channel was closed
     |  
     |  sseenndd(self, s)
     |      Send data to the channel.  Returns the number of bytes sent, or 0 if
     |      the channel stream is closed.  Applications are responsible for
     |      checking that all data has been sent: if only some of the data was
     |      transmitted, the application needs to attempt delivery of the remaining
     |      data.
     |      
     |      :param str s: data to send
     |      :return: number of bytes actually sent, as an `int`
     |      
     |      :raises socket.timeout: if no data could be sent before the timeout set
     |          by `settimeout`.
     |  
     |  sseenndd__eexxiitt__ssttaattuuss(self, status)
     |      Send the exit status of an executed command to the client.  (This
     |      really only makes sense in server mode.)  Many clients expect to
     |      get some sort of status code back from an executed command after
     |      it completes.
     |      
     |      :param int status: the exit code of the process
     |      
     |      .. versionadded:: 1.2
     |  
     |  sseenndd__rreeaaddyy(self)
     |      Returns true if data can be written to this channel without blocking.
     |      This means the channel is either closed (so any write attempt would
     |      return immediately) or there is at least one byte of space in the
     |      outbound buffer. If there is at least one byte of space in the
     |      outbound buffer, a `send` call will succeed immediately and return
     |      the number of bytes actually written.
     |      
     |      :return:
     |          ``True`` if a `send` call on this channel would immediately succeed
     |          or fail
     |  
     |  sseenndd__ssttddeerrrr(self, s)
     |      Send data to the channel on the "stderr" stream.  This is normally
     |      only used by servers to send output from shell commands -- clients
     |      won't use this.  Returns the number of bytes sent, or 0 if the channel
     |      stream is closed.  Applications are responsible for checking that all
     |      data has been sent: if only some of the data was transmitted, the
     |      application needs to attempt delivery of the remaining data.
     |      
     |      :param str s: data to send.
     |      :return: number of bytes actually sent, as an `int`.
     |      
     |      :raises socket.timeout:
     |          if no data could be sent before the timeout set by `settimeout`.
     |      
     |      .. versionadded:: 1.1
     |  
     |  sseennddaallll(self, s)
     |      Send data to the channel, without allowing partial results.  Unlike
     |      `send`, this method continues to send data from the given string until
     |      either all data has been sent or an error occurs.  Nothing is returned.
     |      
     |      :param str s: data to send.
     |      
     |      :raises socket.timeout:
     |          if sending stalled for longer than the timeout set by `settimeout`.
     |      :raises socket.error:
     |          if an error occurred before the entire string was sent.
     |      
     |      .. note::
     |          If the channel is closed while only part of the data has been
     |          sent, there is no way to determine how much data (if any) was sent.
     |          This is irritating, but identically follows Python's API.
     |  
     |  sseennddaallll__ssttddeerrrr(self, s)
     |      Send data to the channel's "stderr" stream, without allowing partial
     |      results.  Unlike `send_stderr`, this method continues to send data
     |      from the given string until all data has been sent or an error occurs.
     |      Nothing is returned.
     |      
     |      :param str s: data to send to the client as "stderr" output.
     |      
     |      :raises socket.timeout:
     |          if sending stalled for longer than the timeout set by `settimeout`.
     |      :raises socket.error:
     |          if an error occurred before the entire string was sent.
     |          
     |      .. versionadded:: 1.1
     |  
     |  sseett__ccoommbbiinnee__ssttddeerrrr(self, combine)
     |      Set whether stderr should be combined into stdout on this channel.
     |      The default is ``False``, but in some cases it may be convenient to
     |      have both streams combined.
     |      
     |      If this is ``False``, and `exec_command` is called (or ``invoke_shell``
     |      with no pty), output to stderr will not show up through the `recv`
     |      and `recv_ready` calls.  You will have to use `recv_stderr` and
     |      `recv_stderr_ready` to get stderr output.
     |      
     |      If this is ``True``, data will never show up via `recv_stderr` or
     |      `recv_stderr_ready`.
     |      
     |      :param bool combine:
     |          ``True`` if stderr output should be combined into stdout on this
     |          channel.
     |      :return: the previous setting (a `bool`).
     |      
     |      .. versionadded:: 1.1
     |  
     |  sseett__nnaammee(self, name)
     |      Set a name for this channel.  Currently it's only used to set the name
     |      of the channel in logfile entries.  The name can be fetched with the
     |      `get_name` method.
     |      
     |      :param str name: new channel name
     |  
     |  sseettbblloocckkiinngg(self, blocking)
     |      Set blocking or non-blocking mode of the channel: if ``blocking`` is 0,
     |      the channel is set to non-blocking mode; otherwise it's set to blocking
     |      mode. Initially all channels are in blocking mode.
     |      
     |      In non-blocking mode, if a `recv` call doesn't find any data, or if a
     |      `send` call can't immediately dispose of the data, an error exception
     |      is raised. In blocking mode, the calls block until they can proceed. An
     |      EOF condition is considered "immediate data" for `recv`, so if the
     |      channel is closed in the read direction, it will never block.
     |      
     |      ``chan.setblocking(0)`` is equivalent to ``chan.settimeout(0)``;
     |      ``chan.setblocking(1)`` is equivalent to ``chan.settimeout(None)``.
     |      
     |      :param int blocking:
     |          0 to set non-blocking mode; non-0 to set blocking mode.
     |  
     |  sseettttiimmeeoouutt(self, timeout)
     |      Set a timeout on blocking read/write operations.  The ``timeout``
     |      argument can be a nonnegative float expressing seconds, or ``None``.  If
     |      a float is given, subsequent channel read/write operations will raise
     |      a timeout exception if the timeout period value has elapsed before the
     |      operation has completed.  Setting a timeout of ``None`` disables
     |      timeouts on socket operations.
     |      
     |      ``chan.settimeout(0.0)`` is equivalent to ``chan.setblocking(0)``;
     |      ``chan.settimeout(None)`` is equivalent to ``chan.setblocking(1)``.
     |      
     |      :param float timeout:
     |          seconds to wait for a pending read/write operation before raising
     |          ``socket.timeout``, or ``None`` for no timeout.
     |  
     |  sshhuuttddoowwnn(self, how)
     |      Shut down one or both halves of the connection.  If ``how`` is 0,
     |      further receives are disallowed.  If ``how`` is 1, further sends
     |      are disallowed.  If ``how`` is 2, further sends and receives are
     |      disallowed.  This closes the stream in one or both directions.
     |      
     |      :param int how:
     |          0 (stop receiving), 1 (stop sending), or 2 (stop receiving and
     |            sending).
     |  
     |  sshhuuttddoowwnn__rreeaadd(self)
     |      Shutdown the receiving side of this socket, closing the stream in
     |      the incoming direction.  After this call, future reads on this
     |      channel will fail instantly.  This is a convenience method, equivalent
     |      to ``shutdown(0)``, for people who don't make it a habit to
     |      memorize unix constants from the 1970s.
     |      
     |      .. versionadded:: 1.2
     |  
     |  sshhuuttddoowwnn__wwrriittee(self)
     |      Shutdown the sending side of this socket, closing the stream in
     |      the outgoing direction.  After this call, future writes on this
     |      channel will fail instantly.  This is a convenience method, equivalent
     |      to ``shutdown(1)``, for people who don't make it a habit to
     |      memorize unix constants from the 1970s.
     |      
     |      .. versionadded:: 1.2
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class CChhaannnneellEExxcceeppttiioonn(SSHException)
     |  Exception raised when an attempt to open a new `.Channel` fails.
     |  
     |  :ivar int code: the error code returned by the server
     |  
     |  .. versionadded:: 1.6
     |  
     |  Method resolution order:
     |      ChannelException
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, code, text)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class DDSSSSKKeeyy(paramiko.pkey.PKey)
     |  Representation of a DSS key which can be used to sign an verify SSH2
     |  data.
     |  
     |  Method resolution order:
     |      DSSKey
     |      paramiko.pkey.PKey
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____hhaasshh____(self)
     |  
     |  ____iinniitt____(self, msg=None, data=None, filename=None, password=None, vals=None, file_obj=None)
     |  
     |  ____ssttrr____(self)
     |  
     |  aassbbyytteess(self)
     |  
     |  ccaann__ssiiggnn(self)
     |  
     |  ggeett__bbiittss(self)
     |  
     |  ggeett__nnaammee(self)
     |  
     |  ssiiggnn__sssshh__ddaattaa(self, data)
     |  
     |  vveerriiffyy__sssshh__ssiigg(self, data, msg)
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy(self, file_obj, password=None)
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy__ffiillee(self, filename, password=None)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeenneerraattee(bits=1024, progress_func=None)
     |      Generate a new private DSS key.  This factory function can be used to
     |      generate a new host key or authentication key.
     |      
     |      :param int bits: number of bits the generated key should be.
     |      :param function progress_func:
     |          an optional function to call at key points in key generation (used
     |          by ``pyCrypto.PublicKey``).
     |      :return: new `.DSSKey` private key
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.pkey.PKey:
     |  
     |  ____ccmmpp____(self, other)
     |      Compare this key to another.  Returns 0 if this key is equivalent to
     |      the given key, or non-0 if they are different.  Only the public parts
     |      of the key are compared, so a public key will compare equal to its
     |      corresponding private key.
     |      
     |      :param .Pkey other: key to compare to.
     |  
     |  ____eeqq____(self, other)
     |  
     |  ggeett__bbaassee6644(self)
     |      Return a base64 string containing the public part of this key.  Nothing
     |      secret is revealed.  This format is compatible with that used to store
     |      public key files or recognized host keys.
     |      
     |      :return: a base64 `string <str>` containing the public part of the key.
     |  
     |  ggeett__ffiinnggeerrpprriinntt(self)
     |      Return an MD5 fingerprint of the public part of this key.  Nothing
     |      secret is revealed.
     |      
     |      :return:
     |          a 16-byte `string <str>` (binary) of the MD5 fingerprint, in SSH
     |          format.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from paramiko.pkey.PKey:
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy(cls, file_obj, password=None) from __builtin__.type
     |      Create a key object by reading a private key from a file (or file-like)
     |      object.  If the private key is encrypted and ``password`` is not
     |      ``None``, the given password will be used to decrypt the key (otherwise
     |      `.PasswordRequiredException` is thrown).
     |      
     |      :param file_obj: the file-like object to read from
     |      :param str password:
     |          an optional password to use to decrypt the key, if it's encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the key
     |      :raises PasswordRequiredException:
     |          if the private key file is encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy__ffiillee(cls, filename, password=None) from __builtin__.type
     |      Create a key object by reading a private key file.  If the private
     |      key is encrypted and ``password`` is not ``None``, the given password
     |      will be used to decrypt the key (otherwise `.PasswordRequiredException`
     |      is thrown).  Through the magic of Python, this factory method will
     |      exist in all subclasses of PKey (such as `.RSAKey` or `.DSSKey`), but
     |      is useless on the abstract PKey class.
     |      
     |      :param str filename: name of the file to read
     |      :param str password:
     |          an optional password to use to decrypt the key file, if it's
     |          encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the file
     |      :raises PasswordRequiredException: if the private key file is
     |          encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.pkey.PKey:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class HHoossttKKeeyyss(_abcoll.MutableMapping)
     |  Representation of an OpenSSH-style "known hosts" file.  Host keys can be
     |  read from one or more files, and then individual hosts can be looked up to
     |  verify server keys during SSH negotiation.
     |  
     |  A `.HostKeys` object can be treated like a dict; any dict lookup is
     |  equivalent to calling `lookup`.
     |  
     |  .. versionadded:: 1.5.3
     |  
     |  Method resolution order:
     |      HostKeys
     |      _abcoll.MutableMapping
     |      _abcoll.Mapping
     |      _abcoll.Sized
     |      _abcoll.Iterable
     |      _abcoll.Container
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ddeelliitteemm____(self, key)
     |  
     |  ____ggeettiitteemm____(self, key)
     |  
     |  ____iinniitt____(self, filename=None)
     |      Create a new HostKeys object, optionally loading keys from an OpenSSH
     |      style host-key file.
     |      
     |      :param str filename: filename to load host keys from, or ``None``
     |  
     |  ____iitteerr____(self)
     |  
     |  ____lleenn____(self)
     |  
     |  ____sseettiitteemm____(self, hostname, entry)
     |  
     |  aadddd(self, hostname, keytype, key)
     |      Add a host key entry to the table.  Any existing entry for a
     |      ``(hostname, keytype)`` pair will be replaced.
     |      
     |      :param str hostname: the hostname (or IP) to add
     |      :param str keytype: key type (``"ssh-rsa"`` or ``"ssh-dss"``)
     |      :param .PKey key: the key to add
     |  
     |  cchheecckk(self, hostname, key)
     |      Return True if the given key is associated with the given hostname
     |      in this dictionary.
     |      
     |      :param str hostname: hostname (or IP) of the SSH server
     |      :param .PKey key: the key to check
     |      :return:
     |          ``True`` if the key is associated with the hostname; else ``False``
     |  
     |  cclleeaarr(self)
     |      Remove all host keys from the dictionary.
     |  
     |  kkeeyyss(self)
     |  
     |  llooaadd(self, filename)
     |      Read a file of known SSH host keys, in the format used by OpenSSH.
     |      This type of file unfortunately doesn't exist on Windows, but on
     |      posix, it will usually be stored in
     |      ``os.path.expanduser("~/.ssh/known_hosts")``.
     |      
     |      If this method is called multiple times, the host keys are merged,
     |      not cleared.  So multiple calls to `load` will just call `add`,
     |      replacing any existing entries and adding new ones.
     |      
     |      :param str filename: name of the file to read host keys from
     |      
     |      :raises IOError: if there was an error reading the file
     |  
     |  llooookkuupp(self, hostname)
     |      Find a hostkey entry for a given hostname or IP.  If no entry is found,
     |      ``None`` is returned.  Otherwise a dictionary of keytype to key is
     |      returned.  The keytype will be either ``"ssh-rsa"`` or ``"ssh-dss"``.
     |      
     |      :param str hostname: the hostname (or IP) to lookup
     |      :return: dict of `str` -> `.PKey` keys associated with this host (or ``None``)
     |  
     |  ssaavvee(self, filename)
     |      Save host keys into a file, in the format used by OpenSSH.  The order of
     |      keys in the file will be preserved when possible (if these keys were
     |      loaded from a file originally).  The single exception is that combined
     |      lines will be split into individual key lines, which is arguably a bug.
     |      
     |      :param str filename: name of the file to write
     |      
     |      :raises IOError: if there was an error writing the file
     |      
     |      .. versionadded:: 1.6.1
     |  
     |  vvaalluueess(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  hhaasshh__hhoosstt(hostname, salt=None)
     |      Return a "hashed" form of the hostname, as used by OpenSSH when storing
     |      hashed hostnames in the known_hosts file.
     |      
     |      :param str hostname: the hostname to hash
     |      :param str salt: optional salt to use when hashing (must be 20 bytes long)
     |      :return: the hashed hostname as a `str`
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____aabbssttrraaccttmmeetthhooddss____ = frozenset([])
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _abcoll.MutableMapping:
     |  
     |  ppoopp(self, key, default=<object object>)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised.
     |  
     |  ppooppiitteemm(self)
     |      D.popitem() -> (k, v), remove and return some (key, value) pair
     |      as a 2-tuple; but raise KeyError if D is empty.
     |  
     |  sseettddeeffaauulltt(self, key, default=None)
     |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
     |  
     |  uuppddaattee(*args, **kwds)
     |      D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
     |      If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
     |      If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
     |      In either case, this is followed by: for k, v in F.items(): D[k] = v
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _abcoll.Mapping:
     |  
     |  ____ccoonnttaaiinnss____(self, key)
     |  
     |  ____eeqq____(self, other)
     |  
     |  ____nnee____(self, other)
     |  
     |  ggeett(self, key, default=None)
     |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
     |  
     |  iitteemmss(self)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iitteerriitteemmss(self)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iitteerrkkeeyyss(self)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  iitteerrvvaalluueess(self)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _abcoll.Mapping:
     |  
     |  ____hhaasshh____ = None
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from _abcoll.Sized:
     |  
     |  ____ssuubbccllaasssshhooookk____(cls, C) from abc.ABCMeta
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _abcoll.Sized:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from _abcoll.Sized:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MMeessssaaggee(__builtin__.object)
     |  An SSH2 message is a stream of bytes that encodes some combination of
     |  strings, integers, bools, and infinite-precision integers (known in Python
     |  as longs).  This class builds or breaks down such a byte stream.
     |  
     |  Normally you don't need to deal with anything this low-level, but it's
     |  exposed for people implementing custom extensions, or features that
     |  paramiko doesn't support yet.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, content=None)
     |      Create a new SSH2 message.
     |      
     |      :param str content:
     |          the byte stream to use as the message content (passed in only when
     |          decomposing a message).
     |  
     |  ____rreepprr____(self)
     |      Returns a string representation of this object, for debugging.
     |  
     |  ____ssttrr____(self)
     |      Return the byte stream content of this message, as a string/bytes obj.
     |  
     |  aadddd(self, *seq)
     |      Add a sequence of items to the stream.  The values are encoded based
     |      on their type: str, int, bool, list, or long.
     |      
     |      .. warning::
     |          Longs are encoded non-deterministically.  Don't use this method.
     |      
     |      :param seq: the sequence of items
     |  
     |  aadddd__aaddaappttiivvee__iinntt(self, n)
     |      Add an integer to the stream.
     |      
     |      :param int n: integer to add
     |  
     |  aadddd__bboooolleeaann(self, b)
     |      Add a boolean value to the stream.
     |      
     |      :param bool b: boolean value to add
     |  
     |  aadddd__bbyyttee(self, b)
     |      Write a single byte to the stream, without any formatting.
     |      
     |      :param str b: byte to add
     |  
     |  aadddd__bbyytteess(self, b)
     |      Write bytes to the stream, without any formatting.
     |      
     |      :param str b: bytes to add
     |  
     |  aadddd__iinntt(self, n)
     |      Add an integer to the stream.
     |      
     |      :param int n: integer to add
     |  
     |  aadddd__iinntt6644(self, n)
     |      Add a 64-bit int to the stream.
     |      
     |      :param long n: long int to add
     |  
     |  aadddd__lliisstt(self, l)
     |      Add a list of strings to the stream.  They are encoded identically to
     |      a single string of values separated by commas.  (Yes, really, that's
     |      how SSH2 does it.)
     |      
     |      :param list l: list of strings to add
     |  
     |  aadddd__mmppiinntt(self, z)
     |      Add a long int to the stream, encoded as an infinite-precision
     |      integer.  This method only works on positive numbers.
     |      
     |      :param long z: long int to add
     |  
     |  aadddd__ssttrriinngg(self, s)
     |      Add a string to the stream.
     |      
     |      :param str s: string to add
     |  
     |  aassbbyytteess(self)
     |      Return the byte stream content of this Message, as bytes.
     |  
     |  ggeett__aaddaappttiivvee__iinntt(self)
     |      Fetch an int from the stream.
     |      
     |      :return: a 32-bit unsigned `int`.
     |  
     |  ggeett__bbiinnaarryy(self)
     |      Fetch a string from the stream.  This could be a byte string and may
     |      contain unprintable characters.  (It's not unheard of for a string to
     |      contain another byte-stream Message.)
     |      
     |      @return: a string.
     |      @rtype: string
     |  
     |  ggeett__bboooolleeaann(self)
     |      Fetch a boolean from the stream.
     |  
     |  ggeett__bbyyttee(self)
     |      Return the next byte of the message, without decomposing it.  This
     |      is equivalent to `get_bytes(1) <get_bytes>`.
     |      
     |      :return:
     |          the next (`str`) byte of the message, or ``' '`` if there aren't
     |          any bytes remaining.
     |  
     |  ggeett__bbyytteess(self, n)
     |      Return the next ``n`` bytes of the message (as a `str`), without
     |      decomposing into an int, decoded string, etc.  Just the raw bytes are
     |      returned. Returns a string of ``n`` zero bytes if there weren't ``n``
     |      bytes remaining in the message.
     |  
     |  ggeett__iinntt(self)
     |      Fetch an int from the stream.
     |      
     |      @return: a 32-bit unsigned integer.
     |      @rtype: int
     |  
     |  ggeett__iinntt6644(self)
     |      Fetch a 64-bit int from the stream.
     |      
     |      :return: a 64-bit unsigned integer (`long`).
     |  
     |  ggeett__lliisstt(self)
     |      Fetch a `list` of `strings <str>` from the stream.
     |      
     |      These are trivially encoded as comma-separated values in a string.
     |  
     |  ggeett__mmppiinntt(self)
     |      Fetch a long int (mpint) from the stream.
     |      
     |      :return: an arbitrary-length integer (`long`).
     |  
     |  ggeett__rreemmaaiinnddeerr(self)
     |      Return the bytes (as a `str`) of this message that haven't already been
     |      parsed and returned.
     |  
     |  ggeett__ssoo__ffaarr(self)
     |      Returns the `str` bytes of this message that have been parsed and
     |      returned. The string passed into a message's constructor can be
     |      regenerated by concatenating ``get_so_far`` and `get_remainder`.
     |  
     |  ggeett__ssttrriinngg(self)
     |      Fetch a `str` from the stream.  This could be a byte string and may
     |      contain unprintable characters.  (It's not unheard of for a string to
     |      contain another byte-stream message.)
     |  
     |  ggeett__tteexxtt(self)
     |      Fetch a string from the stream.  This could be a byte string and may
     |      contain unprintable characters.  (It's not unheard of for a string to
     |      contain another byte-stream Message.)
     |      
     |      @return: a string.
     |      @rtype: string
     |  
     |  rreewwiinndd(self)
     |      Rewind the message to the beginning as if no items had been parsed
     |      out of it yet.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  bbiigg__iinntt = 4278190080L
    
    class MMiissssiinnggHHoossttKKeeyyPPoolliiccyy(__builtin__.object)
     |  Interface for defining the policy that `.SSHClient` should use when the
     |  SSH server's hostname is not in either the system host keys or the
     |  application's keys.  Pre-made classes implement policies for automatically
     |  adding the key to the application's `.HostKeys` object (`.AutoAddPolicy`),
     |  and for automatically rejecting the key (`.RejectPolicy`).
     |  
     |  This function may be used to ask the user to verify the key, for example.
     |  
     |  Methods defined here:
     |  
     |  mmiissssiinngg__hhoosstt__kkeeyy(self, client, hostname, key)
     |      Called when an `.SSHClient` receives a server key for a server that
     |      isn't in either the system or local `.HostKeys` object.  To accept
     |      the key, simply return.  To reject, raised an exception (which will
     |      be passed to the calling application).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPKKeeyy(__builtin__.object)
     |  Base class for public keys.
     |  
     |  Methods defined here:
     |  
     |  ____ccmmpp____(self, other)
     |      Compare this key to another.  Returns 0 if this key is equivalent to
     |      the given key, or non-0 if they are different.  Only the public parts
     |      of the key are compared, so a public key will compare equal to its
     |      corresponding private key.
     |      
     |      :param .Pkey other: key to compare to.
     |  
     |  ____eeqq____(self, other)
     |  
     |  ____iinniitt____(self, msg=None, data=None)
     |      Create a new instance of this public key type.  If ``msg`` is given,
     |      the key's public part(s) will be filled in from the message.  If
     |      ``data`` is given, the key's public part(s) will be filled in from
     |      the string.
     |      
     |      :param .Message msg:
     |          an optional SSH `.Message` containing a public key of this type.
     |      :param str data: an optional string containing a public key of this type
     |      
     |      :raises SSHException:
     |          if a key cannot be created from the ``data`` or ``msg`` given, or
     |          no key was passed in.
     |  
     |  ____ssttrr____(self)
     |  
     |  aassbbyytteess(self)
     |      Return a string of an SSH `.Message` made up of the public part(s) of
     |      this key.  This string is suitable for passing to `__init__` to
     |      re-create the key object later.
     |  
     |  ccaann__ssiiggnn(self)
     |      Return ``True`` if this key has the private part necessary for signing
     |      data.
     |  
     |  ggeett__bbaassee6644(self)
     |      Return a base64 string containing the public part of this key.  Nothing
     |      secret is revealed.  This format is compatible with that used to store
     |      public key files or recognized host keys.
     |      
     |      :return: a base64 `string <str>` containing the public part of the key.
     |  
     |  ggeett__bbiittss(self)
     |      Return the number of significant bits in this key.  This is useful
     |      for judging the relative security of a key.
     |      
     |      :return: bits in the key (as an `int`)
     |  
     |  ggeett__ffiinnggeerrpprriinntt(self)
     |      Return an MD5 fingerprint of the public part of this key.  Nothing
     |      secret is revealed.
     |      
     |      :return:
     |          a 16-byte `string <str>` (binary) of the MD5 fingerprint, in SSH
     |          format.
     |  
     |  ggeett__nnaammee(self)
     |      Return the name of this private key implementation.
     |      
     |      :return:
     |          name of this private key type, in SSH terminology, as a `str` (for
     |          example, ``"ssh-rsa"``).
     |  
     |  ssiiggnn__sssshh__ddaattaa(self, data)
     |      Sign a blob of data with this private key, and return a `.Message`
     |      representing an SSH signature message.
     |      
     |      :param str data: the data to sign.
     |      :return: an SSH signature `message <.Message>`.
     |  
     |  vveerriiffyy__sssshh__ssiigg(self, data, msg)
     |      Given a blob of data, and an SSH message representing a signature of
     |      that data, verify that it was signed with this key.
     |      
     |      :param str data: the data that was signed.
     |      :param .Message msg: an SSH signature message
     |      :return:
     |          ``True`` if the signature verifies correctly; ``False`` otherwise.
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy(self, file_obj, password=None)
     |      Write private key contents into a file (or file-like) object.  If the
     |      password is not ``None``, the key is encrypted before writing.
     |      
     |      :param file_obj: the file-like object to write into
     |      :param str password: an optional password to use to encrypt the key
     |      
     |      :raises IOError: if there was an error writing to the file
     |      :raises SSHException: if the key is invalid
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy__ffiillee(self, filename, password=None)
     |      Write private key contents into a file.  If the password is not
     |      ``None``, the key is encrypted before writing.
     |      
     |      :param str filename: name of the file to write
     |      :param str password:
     |          an optional password to use to encrypt the key file
     |      
     |      :raises IOError: if there was an error writing the file
     |      :raises SSHException: if the key is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy(cls, file_obj, password=None) from __builtin__.type
     |      Create a key object by reading a private key from a file (or file-like)
     |      object.  If the private key is encrypted and ``password`` is not
     |      ``None``, the given password will be used to decrypt the key (otherwise
     |      `.PasswordRequiredException` is thrown).
     |      
     |      :param file_obj: the file-like object to read from
     |      :param str password:
     |          an optional password to use to decrypt the key, if it's encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the key
     |      :raises PasswordRequiredException:
     |          if the private key file is encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy__ffiillee(cls, filename, password=None) from __builtin__.type
     |      Create a key object by reading a private key file.  If the private
     |      key is encrypted and ``password`` is not ``None``, the given password
     |      will be used to decrypt the key (otherwise `.PasswordRequiredException`
     |      is thrown).  Through the magic of Python, this factory method will
     |      exist in all subclasses of PKey (such as `.RSAKey` or `.DSSKey`), but
     |      is useless on the abstract PKey class.
     |      
     |      :param str filename: name of the file to read
     |      :param str password:
     |          an optional password to use to decrypt the key file, if it's
     |          encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the file
     |      :raises PasswordRequiredException: if the private key file is
     |          encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPaasssswwoorrddRReeqquuiirreeddEExxcceeppttiioonn(AuthenticationException)
     |  Exception raised when a password is needed to unlock a private key file.
     |  
     |  Method resolution order:
     |      PasswordRequiredException
     |      AuthenticationException
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class PPrrooxxyyCCoommmmaanndd(paramiko.util.ClosingContextManager)
     |  Wraps a subprocess running ProxyCommand-driven programs.
     |  
     |  This class implements a the socket-like interface needed by the
     |  `.Transport` and `.Packetizer` classes. Using this class instead of a
     |  regular socket makes it possible to talk with a Popen'd command that will
     |  proxy traffic between the client and a server hosted in another machine.
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  Method resolution order:
     |      ProxyCommand
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, command_line)
     |      Create a new CommandProxy instance. The instance created by this
     |      class can be passed as an argument to the `.Transport` class.
     |      
     |      :param str command_line:
     |          the command that should be executed and used as the proxy.
     |  
     |  cclloossee(self)
     |  
     |  rreeccvv(self, size)
     |      Read from the standard output of the forked program.
     |      
     |      :param int size: how many chars should be read
     |      
     |      :return: the length of the read content, as an `int`
     |  
     |  sseenndd(self, content)
     |      Write the content received from the SSH client to the standard
     |      input of the forked command.
     |      
     |      :param str content: string to be sent to the forked command
     |  
     |  sseettttiimmeeoouutt(self, timeout)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class PPrrooxxyyCCoommmmaannddFFaaiilluurree(SSHException)
     |  The "ProxyCommand" found in the .ssh/config file returned an error.
     |  
     |  :ivar str command: The command line that is generating this exception.
     |  :ivar str error: The error captured from the proxy command output.
     |  
     |  Method resolution order:
     |      ProxyCommandFailure
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, command, error)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SSHException:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class RRSSAAKKeeyy(paramiko.pkey.PKey)
     |  Representation of an RSA key which can be used to sign and verify SSH2
     |  data.
     |  
     |  Method resolution order:
     |      RSAKey
     |      paramiko.pkey.PKey
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____hhaasshh____(self)
     |  
     |  ____iinniitt____(self, msg=None, data=None, filename=None, password=None, vals=None, file_obj=None)
     |  
     |  ____ssttrr____(self)
     |  
     |  aassbbyytteess(self)
     |  
     |  ccaann__ssiiggnn(self)
     |  
     |  ggeett__bbiittss(self)
     |  
     |  ggeett__nnaammee(self)
     |  
     |  ssiiggnn__sssshh__ddaattaa(self, data)
     |  
     |  vveerriiffyy__sssshh__ssiigg(self, data, msg)
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy(self, file_obj, password=None)
     |  
     |  wwrriittee__pprriivvaattee__kkeeyy__ffiillee(self, filename, password=None)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ggeenneerraattee(bits, progress_func=None)
     |      Generate a new private RSA key.  This factory function can be used to
     |      generate a new host key or authentication key.
     |      
     |      :param int bits: number of bits the generated key should be.
     |      :param function progress_func:
     |          an optional function to call at key points in key generation (used
     |          by ``pyCrypto.PublicKey``).
     |      :return: new `.RSAKey` private key
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.pkey.PKey:
     |  
     |  ____ccmmpp____(self, other)
     |      Compare this key to another.  Returns 0 if this key is equivalent to
     |      the given key, or non-0 if they are different.  Only the public parts
     |      of the key are compared, so a public key will compare equal to its
     |      corresponding private key.
     |      
     |      :param .Pkey other: key to compare to.
     |  
     |  ____eeqq____(self, other)
     |  
     |  ggeett__bbaassee6644(self)
     |      Return a base64 string containing the public part of this key.  Nothing
     |      secret is revealed.  This format is compatible with that used to store
     |      public key files or recognized host keys.
     |      
     |      :return: a base64 `string <str>` containing the public part of the key.
     |  
     |  ggeett__ffiinnggeerrpprriinntt(self)
     |      Return an MD5 fingerprint of the public part of this key.  Nothing
     |      secret is revealed.
     |      
     |      :return:
     |          a 16-byte `string <str>` (binary) of the MD5 fingerprint, in SSH
     |          format.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from paramiko.pkey.PKey:
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy(cls, file_obj, password=None) from __builtin__.type
     |      Create a key object by reading a private key from a file (or file-like)
     |      object.  If the private key is encrypted and ``password`` is not
     |      ``None``, the given password will be used to decrypt the key (otherwise
     |      `.PasswordRequiredException` is thrown).
     |      
     |      :param file_obj: the file-like object to read from
     |      :param str password:
     |          an optional password to use to decrypt the key, if it's encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the key
     |      :raises PasswordRequiredException:
     |          if the private key file is encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ffrroomm__pprriivvaattee__kkeeyy__ffiillee(cls, filename, password=None) from __builtin__.type
     |      Create a key object by reading a private key file.  If the private
     |      key is encrypted and ``password`` is not ``None``, the given password
     |      will be used to decrypt the key (otherwise `.PasswordRequiredException`
     |      is thrown).  Through the magic of Python, this factory method will
     |      exist in all subclasses of PKey (such as `.RSAKey` or `.DSSKey`), but
     |      is useless on the abstract PKey class.
     |      
     |      :param str filename: name of the file to read
     |      :param str password:
     |          an optional password to use to decrypt the key file, if it's
     |          encrypted
     |      :return: a new `.PKey` based on the given private key
     |      
     |      :raises IOError: if there was an error reading the file
     |      :raises PasswordRequiredException: if the private key file is
     |          encrypted, and ``password`` is ``None``
     |      :raises SSHException: if the key file is invalid
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.pkey.PKey:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class RReejjeeccttPPoolliiccyy(MissingHostKeyPolicy)
     |  Policy for automatically rejecting the unknown hostname & key.  This is
     |  used by `.SSHClient`.
     |  
     |  Method resolution order:
     |      RejectPolicy
     |      MissingHostKeyPolicy
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  mmiissssiinngg__hhoosstt__kkeeyy(self, client, hostname, key)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MissingHostKeyPolicy:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSFFTTPP(SFTPClient)
     |  An alias for `.SFTPClient` for backwards compatability.
     |  
     |  Method resolution order:
     |      SFTP
     |      SFTPClient
     |      paramiko.sftp.BaseSFTP
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods inherited from SFTPClient:
     |  
     |  ____iinniitt____(self, sock)
     |      Create an SFTP client from an existing `.Channel`.  The channel
     |      should already have requested the ``"sftp"`` subsystem.
     |      
     |      An alternate way to create an SFTP client context is by using
     |      `from_transport`.
     |      
     |      :param .Channel sock: an open `.Channel` using the ``"sftp"`` subsystem
     |      
     |      :raises SSHException: if there's an exception while negotiating
     |          sftp
     |  
     |  cchhddiirr(self, path=None)
     |      Change the "current directory" of this SFTP session.  Since SFTP
     |      doesn't really have the concept of a current working directory, this is
     |      emulated by Paramiko.  Once you use this method to set a working
     |      directory, all operations on this `.SFTPClient` object will be relative
     |      to that path. You can pass in ``None`` to stop using a current working
     |      directory.
     |      
     |      :param str path: new current working directory
     |      
     |      :raises IOError: if the requested path doesn't exist on the server
     |      
     |      .. versionadded:: 1.4
     |  
     |  cchhmmoodd(self, path, mode)
     |      Change the mode (permissions) of a file.  The permissions are
     |      unix-style and identical to those used by Python's `os.chmod`
     |      function.
     |      
     |      :param str path: path of the file to change the permissions of
     |      :param int mode: new permissions
     |  
     |  cchhoowwnn(self, path, uid, gid)
     |      Change the owner (``uid``) and group (``gid``) of a file.  As with
     |      Python's `os.chown` function, you must pass both arguments, so if you
     |      only want to change one, use `stat` first to retrieve the current
     |      owner and group.
     |      
     |      :param str path: path of the file to change the owner and group of
     |      :param int uid: new owner's uid
     |      :param int gid: new group id
     |  
     |  cclloossee(self)
     |      Close the SFTP session and its underlying channel.
     |      
     |      .. versionadded:: 1.4
     |  
     |  ffiillee = open(self, filename, mode='r', bufsize=-1)
     |      Open a file on the remote server.  The arguments are the same as for
     |      Python's built-in `python:file` (aka `python:open`).  A file-like
     |      object is returned, which closely mimics the behavior of a normal
     |      Python file object, including the ability to be used as a context
     |      manager.
     |      
     |      The mode indicates how the file is to be opened: ``'r'`` for reading,
     |      ``'w'`` for writing (truncating an existing file), ``'a'`` for
     |      appending, ``'r+'`` for reading/writing, ``'w+'`` for reading/writing
     |      (truncating an existing file), ``'a+'`` for reading/appending.  The
     |      Python ``'b'`` flag is ignored, since SSH treats all files as binary.
     |      The ``'U'`` flag is supported in a compatible way.
     |      
     |      Since 1.5.2, an ``'x'`` flag indicates that the operation should only
     |      succeed if the file was created and did not previously exist.  This has
     |      no direct mapping to Python's file flags, but is commonly known as the
     |      ``O_EXCL`` flag in posix.
     |      
     |      The file will be buffered in standard Python style by default, but
     |      can be altered with the ``bufsize`` parameter.  ``0`` turns off
     |      buffering, ``1`` uses line buffering, and any number greater than 1
     |      (``>1``) uses that specific buffer size.
     |      
     |      :param str filename: name of the file to open
     |      :param str mode: mode (Python-style) to open in
     |      :param int bufsize: desired buffering (-1 = default buffer size)
     |      :return: an `.SFTPFile` object representing the open file
     |      
     |      :raises IOError: if the file could not be opened.
     |  
     |  ggeett(self, remotepath, localpath, callback=None)
     |      Copy a remote file (``remotepath``) from the SFTP server to the local
     |      host as ``localpath``.  Any exception raised by operations will be
     |      passed through.  This method is primarily provided as a convenience.
     |      
     |      :param str remotepath: the remote file to copy
     |      :param str localpath: the destination path on the local host
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      
     |      .. versionadded:: 1.4
     |      .. versionchanged:: 1.7.4
     |          Added the ``callback`` param
     |  
     |  ggeett__cchhaannnneell(self)
     |      Return the underlying `.Channel` object for this SFTP session.  This
     |      might be useful for doing things like setting a timeout on the channel.
     |      
     |      .. versionadded:: 1.7.1
     |  
     |  ggeettccwwdd(self)
     |      Return the "current working directory" for this SFTP session, as
     |      emulated by Paramiko.  If no directory has been set with `chdir`,
     |      this method will return ``None``.
     |      
     |      .. versionadded:: 1.4
     |  
     |  ggeettffoo(self, remotepath, fl, callback=None)
     |      Copy a remote file (``remotepath``) from the SFTP server and write to
     |      an open file or file-like object, ``fl``.  Any exception raised by
     |      operations will be passed through.  This method is primarily provided
     |      as a convenience.
     |      
     |      :param object remotepath: opened file or file-like object to copy to
     |      :param str fl:
     |          the destination path on the local host or open file object
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      :return: the `number <int>` of bytes written to the opened file object
     |      
     |      .. versionadded:: 1.10
     |  
     |  lliissttddiirr(self, path='.')
     |      Return a list containing the names of the entries in the given ``path``.
     |      
     |      The list is in arbitrary order.  It does not include the special
     |      entries ``'.'`` and ``'..'`` even if they are present in the folder.
     |      This method is meant to mirror ``os.listdir`` as closely as possible.
     |      For a list of full `.SFTPAttributes` objects, see `listdir_attr`.
     |      
     |      :param str path: path to list (defaults to ``'.'``)
     |  
     |  lliissttddiirr__aattttrr(self, path='.')
     |      Return a list containing `.SFTPAttributes` objects corresponding to
     |      files in the given ``path``.  The list is in arbitrary order.  It does
     |      not include the special entries ``'.'`` and ``'..'`` even if they are
     |      present in the folder.
     |      
     |      The returned `.SFTPAttributes` objects will each have an additional
     |      field: ``longname``, which may contain a formatted string of the file's
     |      attributes, in unix format.  The content of this string will probably
     |      depend on the SFTP server implementation.
     |      
     |      :param str path: path to list (defaults to ``'.'``)
     |      :return: list of `.SFTPAttributes` objects
     |      
     |      .. versionadded:: 1.2
     |  
     |  lliissttddiirr__iitteerr(self, path='.', read_aheads=50)
     |      Generator version of `.listdir_attr`.
     |      
     |      See the API docs for `.listdir_attr` for overall details.
     |      
     |      This function adds one more kwarg on top of `.listdir_attr`:
     |      ``read_aheads``, an integer controlling how many
     |      ``SSH_FXP_READDIR`` requests are made to the server. The default of 50
     |      should suffice for most file listings as each request/response cycle
     |      may contain multiple files (dependant on server implementation.)
     |      
     |      .. versionadded:: 1.15
     |  
     |  llssttaatt(self, path)
     |      Retrieve information about a file on the remote system, without
     |      following symbolic links (shortcuts).  This otherwise behaves exactly
     |      the same as `stat`.
     |      
     |      :param str path: the filename to stat
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file
     |  
     |  mmkkddiirr(self, path, mode=511)
     |      Create a folder (directory) named ``path`` with numeric mode ``mode``.
     |      The default mode is 0777 (octal).  On some systems, mode is ignored.
     |      Where it is used, the current umask value is first masked out.
     |      
     |      :param str path: name of the folder to create
     |      :param int mode: permissions (posix-style) for the newly-created folder
     |  
     |  nnoorrmmaalliizzee(self, path)
     |      Return the normalized path (on the server) of a given path.  This
     |      can be used to quickly resolve symbolic links or determine what the
     |      server is considering to be the "current folder" (by passing ``'.'``
     |      as ``path``).
     |      
     |      :param str path: path to be normalized
     |      :return: normalized form of the given path (as a `str`)
     |      
     |      :raises IOError: if the path can't be resolved on the server
     |  
     |  ooppeenn(self, filename, mode='r', bufsize=-1)
     |      Open a file on the remote server.  The arguments are the same as for
     |      Python's built-in `python:file` (aka `python:open`).  A file-like
     |      object is returned, which closely mimics the behavior of a normal
     |      Python file object, including the ability to be used as a context
     |      manager.
     |      
     |      The mode indicates how the file is to be opened: ``'r'`` for reading,
     |      ``'w'`` for writing (truncating an existing file), ``'a'`` for
     |      appending, ``'r+'`` for reading/writing, ``'w+'`` for reading/writing
     |      (truncating an existing file), ``'a+'`` for reading/appending.  The
     |      Python ``'b'`` flag is ignored, since SSH treats all files as binary.
     |      The ``'U'`` flag is supported in a compatible way.
     |      
     |      Since 1.5.2, an ``'x'`` flag indicates that the operation should only
     |      succeed if the file was created and did not previously exist.  This has
     |      no direct mapping to Python's file flags, but is commonly known as the
     |      ``O_EXCL`` flag in posix.
     |      
     |      The file will be buffered in standard Python style by default, but
     |      can be altered with the ``bufsize`` parameter.  ``0`` turns off
     |      buffering, ``1`` uses line buffering, and any number greater than 1
     |      (``>1``) uses that specific buffer size.
     |      
     |      :param str filename: name of the file to open
     |      :param str mode: mode (Python-style) to open in
     |      :param int bufsize: desired buffering (-1 = default buffer size)
     |      :return: an `.SFTPFile` object representing the open file
     |      
     |      :raises IOError: if the file could not be opened.
     |  
     |  ppuutt(self, localpath, remotepath, callback=None, confirm=True)
     |      Copy a local file (``localpath``) to the SFTP server as ``remotepath``.
     |      Any exception raised by operations will be passed through.  This
     |      method is primarily provided as a convenience.
     |      
     |      The SFTP operations use pipelining for speed.
     |      
     |      :param str localpath: the local file to copy
     |      :param str remotepath: the destination path on the SFTP server. Note
     |          that the filename should be included. Only specifying a directory
     |          may result in an error.
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      :param bool confirm:
     |          whether to do a stat() on the file afterwards to confirm the file
     |          size
     |      
     |      :return: an `.SFTPAttributes` object containing attributes about the given file
     |      
     |      .. versionadded:: 1.4
     |      .. versionchanged:: 1.7.4
     |          ``callback`` and rich attribute return value added.
     |      .. versionchanged:: 1.7.7
     |          ``confirm`` param added.
     |  
     |  ppuuttffoo(self, fl, remotepath, file_size=0, callback=None, confirm=True)
     |      Copy the contents of an open file object (``fl``) to the SFTP server as
     |      ``remotepath``. Any exception raised by operations will be passed
     |      through.
     |      
     |      The SFTP operations use pipelining for speed.
     |      
     |      :param fl: opened file or file-like object to copy
     |      :param str remotepath: the destination path on the SFTP server
     |      :param int file_size:
     |          optional size parameter passed to callback. If none is specified,
     |          size defaults to 0
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |          (since 1.7.4)
     |      :param bool confirm:
     |          whether to do a stat() on the file afterwards to confirm the file
     |          size (since 1.7.7)
     |      
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file.
     |      
     |      .. versionadded:: 1.10
     |  
     |  rreeaaddlliinnkk(self, path)
     |      Return the target of a symbolic link (shortcut).  You can use
     |      `symlink` to create these.  The result may be either an absolute or
     |      relative pathname.
     |      
     |      :param str path: path of the symbolic link file
     |      :return: target path, as a `str`
     |  
     |  rreemmoovvee(self, path)
     |      Remove the file at the given path.  This only works on files; for
     |      removing folders (directories), use `rmdir`.
     |      
     |      :param str path: path (absolute or relative) of the file to remove
     |      
     |      :raises IOError: if the path refers to a folder (directory)
     |  
     |  rreennaammee(self, oldpath, newpath)
     |      Rename a file or folder from ``oldpath`` to ``newpath``.
     |      
     |      :param str oldpath: existing name of the file or folder
     |      :param str newpath: new name for the file or folder
     |      
     |      :raises IOError: if ``newpath`` is a folder, or something else goes
     |          wrong
     |  
     |  rrmmddiirr(self, path)
     |      Remove the folder named ``path``.
     |      
     |      :param str path: name of the folder to remove
     |  
     |  ssttaatt(self, path)
     |      Retrieve information about a file on the remote system.  The return
     |      value is an object whose attributes correspond to the attributes of
     |      Python's ``stat`` structure as returned by ``os.stat``, except that it
     |      contains fewer fields.  An SFTP server may return as much or as little
     |      info as it wants, so the results may vary from server to server.
     |      
     |      Unlike a Python `python:stat` object, the result may not be accessed as
     |      a tuple.  This is mostly due to the author's slack factor.
     |      
     |      The fields supported are: ``st_mode``, ``st_size``, ``st_uid``,
     |      ``st_gid``, ``st_atime``, and ``st_mtime``.
     |      
     |      :param str path: the filename to stat
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file
     |  
     |  ssyymmlliinnkk(self, source, dest)
     |      Create a symbolic link (shortcut) of the ``source`` path at
     |      ``destination``.
     |      
     |      :param str source: path of the original file
     |      :param str dest: path of the newly created symlink
     |  
     |  ttrruunnccaattee(self, path, size)
     |      Change the size of the file specified by ``path``.  This usually
     |      extends or shrinks the size of the file, just like the `~file.truncate`
     |      method on Python file objects.
     |      
     |      :param str path: path of the file to modify
     |      :param size: the new size of the file
     |      :type size: int or long
     |  
     |  uunnlliinnkk = remove(self, path)
     |      Remove the file at the given path.  This only works on files; for
     |      removing folders (directories), use `rmdir`.
     |      
     |      :param str path: path (absolute or relative) of the file to remove
     |      
     |      :raises IOError: if the path refers to a folder (directory)
     |  
     |  uuttiimmee(self, path, times)
     |      Set the access and modified times of the file specified by ``path``.  If
     |      ``times`` is ``None``, then the file's access and modified times are set
     |      to the current time.  Otherwise, ``times`` must be a 2-tuple of numbers,
     |      of the form ``(atime, mtime)``, which is used to set the access and
     |      modified times, respectively.  This bizarre API is mimicked from Python
     |      for the sake of consistency -- I apologize.
     |      
     |      :param str path: path of the file to modify
     |      :param tuple times:
     |          ``None`` or a tuple of (access time, modified time) in standard
     |          internet epoch time (seconds since 01 January 1970 GMT)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from SFTPClient:
     |  
     |  ffrroomm__ttrraannssppoorrtt(cls, t, window_size=None, max_packet_size=None) from __builtin__.type
     |      Create an SFTP client channel from an open `.Transport`.
     |      
     |      Setting the window and packet sizes might affect the transfer speed.
     |      The default settings in the `.Transport` class are the same as in
     |      OpenSSH and should work adequately for both files transfers and
     |      interactive sessions.
     |      
     |      :param .Transport t: an open `.Transport` which is already authenticated
     |      :param int window_size:
     |          optional window size for the `.SFTPClient` session.
     |      :param int max_packet_size:
     |          optional max packet size for the `.SFTPClient` session..
     |      
     |      :return:
     |          a new `.SFTPClient` object, referring to an sftp session (channel)
     |          across the transport
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``window_size`` and ``max_packet_size`` arguments.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.sftp.BaseSFTP:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
    
    class SSFFTTPPAAttttrriibbuutteess(__builtin__.object)
     |  Representation of the attributes of a file (or proxied file) for SFTP in
     |  client or server mode.  It attemps to mirror the object returned by
     |  `os.stat` as closely as possible, so it may have the following fields,
     |  with the same meanings as those returned by an `os.stat` object:
     |  
     |      - ``st_size``
     |      - ``st_uid``
     |      - ``st_gid``
     |      - ``st_mode``
     |      - ``st_atime``
     |      - ``st_mtime``
     |  
     |  Because SFTP allows flags to have other arbitrary named attributes, these
     |  are stored in a dict named ``attr``.  Occasionally, the filename is also
     |  stored, in ``filename``.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Create a new (empty) SFTPAttributes object.  All fields will be empty.
     |  
     |  ____rreepprr____(self)
     |  
     |  ____ssttrr____(self)
     |      create a unix-style long description of the file (like ls -l)
     |  
     |  aassbbyytteess(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ffrroomm__ssttaatt(cls, obj, filename=None) from __builtin__.type
     |      Create an `.SFTPAttributes` object from an existing ``stat`` object (an
     |      object returned by `os.stat`).
     |      
     |      :param object obj: an object returned by `os.stat` (or equivalent).
     |      :param str filename: the filename associated with this file.
     |      :return: new `.SFTPAttributes` object with the same attribute fields.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  FFLLAAGG__AAMMTTIIMMEE = 8
     |  
     |  FFLLAAGG__EEXXTTEENNDDEEDD = 2147483648L
     |  
     |  FFLLAAGG__PPEERRMMIISSSSIIOONNSS = 4
     |  
     |  FFLLAAGG__SSIIZZEE = 1
     |  
     |  FFLLAAGG__UUIIDDGGIIDD = 2
    
    class SSFFTTPPCClliieenntt(paramiko.sftp.BaseSFTP, paramiko.util.ClosingContextManager)
     |  SFTP client object.
     |  
     |  Used to open an SFTP session across an open SSH `.Transport` and perform
     |  remote file operations.
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  Method resolution order:
     |      SFTPClient
     |      paramiko.sftp.BaseSFTP
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, sock)
     |      Create an SFTP client from an existing `.Channel`.  The channel
     |      should already have requested the ``"sftp"`` subsystem.
     |      
     |      An alternate way to create an SFTP client context is by using
     |      `from_transport`.
     |      
     |      :param .Channel sock: an open `.Channel` using the ``"sftp"`` subsystem
     |      
     |      :raises SSHException: if there's an exception while negotiating
     |          sftp
     |  
     |  cchhddiirr(self, path=None)
     |      Change the "current directory" of this SFTP session.  Since SFTP
     |      doesn't really have the concept of a current working directory, this is
     |      emulated by Paramiko.  Once you use this method to set a working
     |      directory, all operations on this `.SFTPClient` object will be relative
     |      to that path. You can pass in ``None`` to stop using a current working
     |      directory.
     |      
     |      :param str path: new current working directory
     |      
     |      :raises IOError: if the requested path doesn't exist on the server
     |      
     |      .. versionadded:: 1.4
     |  
     |  cchhmmoodd(self, path, mode)
     |      Change the mode (permissions) of a file.  The permissions are
     |      unix-style and identical to those used by Python's `os.chmod`
     |      function.
     |      
     |      :param str path: path of the file to change the permissions of
     |      :param int mode: new permissions
     |  
     |  cchhoowwnn(self, path, uid, gid)
     |      Change the owner (``uid``) and group (``gid``) of a file.  As with
     |      Python's `os.chown` function, you must pass both arguments, so if you
     |      only want to change one, use `stat` first to retrieve the current
     |      owner and group.
     |      
     |      :param str path: path of the file to change the owner and group of
     |      :param int uid: new owner's uid
     |      :param int gid: new group id
     |  
     |  cclloossee(self)
     |      Close the SFTP session and its underlying channel.
     |      
     |      .. versionadded:: 1.4
     |  
     |  ffiillee = open(self, filename, mode='r', bufsize=-1)
     |  
     |  ggeett(self, remotepath, localpath, callback=None)
     |      Copy a remote file (``remotepath``) from the SFTP server to the local
     |      host as ``localpath``.  Any exception raised by operations will be
     |      passed through.  This method is primarily provided as a convenience.
     |      
     |      :param str remotepath: the remote file to copy
     |      :param str localpath: the destination path on the local host
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      
     |      .. versionadded:: 1.4
     |      .. versionchanged:: 1.7.4
     |          Added the ``callback`` param
     |  
     |  ggeett__cchhaannnneell(self)
     |      Return the underlying `.Channel` object for this SFTP session.  This
     |      might be useful for doing things like setting a timeout on the channel.
     |      
     |      .. versionadded:: 1.7.1
     |  
     |  ggeettccwwdd(self)
     |      Return the "current working directory" for this SFTP session, as
     |      emulated by Paramiko.  If no directory has been set with `chdir`,
     |      this method will return ``None``.
     |      
     |      .. versionadded:: 1.4
     |  
     |  ggeettffoo(self, remotepath, fl, callback=None)
     |      Copy a remote file (``remotepath``) from the SFTP server and write to
     |      an open file or file-like object, ``fl``.  Any exception raised by
     |      operations will be passed through.  This method is primarily provided
     |      as a convenience.
     |      
     |      :param object remotepath: opened file or file-like object to copy to
     |      :param str fl:
     |          the destination path on the local host or open file object
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      :return: the `number <int>` of bytes written to the opened file object
     |      
     |      .. versionadded:: 1.10
     |  
     |  lliissttddiirr(self, path='.')
     |      Return a list containing the names of the entries in the given ``path``.
     |      
     |      The list is in arbitrary order.  It does not include the special
     |      entries ``'.'`` and ``'..'`` even if they are present in the folder.
     |      This method is meant to mirror ``os.listdir`` as closely as possible.
     |      For a list of full `.SFTPAttributes` objects, see `listdir_attr`.
     |      
     |      :param str path: path to list (defaults to ``'.'``)
     |  
     |  lliissttddiirr__aattttrr(self, path='.')
     |      Return a list containing `.SFTPAttributes` objects corresponding to
     |      files in the given ``path``.  The list is in arbitrary order.  It does
     |      not include the special entries ``'.'`` and ``'..'`` even if they are
     |      present in the folder.
     |      
     |      The returned `.SFTPAttributes` objects will each have an additional
     |      field: ``longname``, which may contain a formatted string of the file's
     |      attributes, in unix format.  The content of this string will probably
     |      depend on the SFTP server implementation.
     |      
     |      :param str path: path to list (defaults to ``'.'``)
     |      :return: list of `.SFTPAttributes` objects
     |      
     |      .. versionadded:: 1.2
     |  
     |  lliissttddiirr__iitteerr(self, path='.', read_aheads=50)
     |      Generator version of `.listdir_attr`.
     |      
     |      See the API docs for `.listdir_attr` for overall details.
     |      
     |      This function adds one more kwarg on top of `.listdir_attr`:
     |      ``read_aheads``, an integer controlling how many
     |      ``SSH_FXP_READDIR`` requests are made to the server. The default of 50
     |      should suffice for most file listings as each request/response cycle
     |      may contain multiple files (dependant on server implementation.)
     |      
     |      .. versionadded:: 1.15
     |  
     |  llssttaatt(self, path)
     |      Retrieve information about a file on the remote system, without
     |      following symbolic links (shortcuts).  This otherwise behaves exactly
     |      the same as `stat`.
     |      
     |      :param str path: the filename to stat
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file
     |  
     |  mmkkddiirr(self, path, mode=511)
     |      Create a folder (directory) named ``path`` with numeric mode ``mode``.
     |      The default mode is 0777 (octal).  On some systems, mode is ignored.
     |      Where it is used, the current umask value is first masked out.
     |      
     |      :param str path: name of the folder to create
     |      :param int mode: permissions (posix-style) for the newly-created folder
     |  
     |  nnoorrmmaalliizzee(self, path)
     |      Return the normalized path (on the server) of a given path.  This
     |      can be used to quickly resolve symbolic links or determine what the
     |      server is considering to be the "current folder" (by passing ``'.'``
     |      as ``path``).
     |      
     |      :param str path: path to be normalized
     |      :return: normalized form of the given path (as a `str`)
     |      
     |      :raises IOError: if the path can't be resolved on the server
     |  
     |  ooppeenn(self, filename, mode='r', bufsize=-1)
     |      Open a file on the remote server.  The arguments are the same as for
     |      Python's built-in `python:file` (aka `python:open`).  A file-like
     |      object is returned, which closely mimics the behavior of a normal
     |      Python file object, including the ability to be used as a context
     |      manager.
     |      
     |      The mode indicates how the file is to be opened: ``'r'`` for reading,
     |      ``'w'`` for writing (truncating an existing file), ``'a'`` for
     |      appending, ``'r+'`` for reading/writing, ``'w+'`` for reading/writing
     |      (truncating an existing file), ``'a+'`` for reading/appending.  The
     |      Python ``'b'`` flag is ignored, since SSH treats all files as binary.
     |      The ``'U'`` flag is supported in a compatible way.
     |      
     |      Since 1.5.2, an ``'x'`` flag indicates that the operation should only
     |      succeed if the file was created and did not previously exist.  This has
     |      no direct mapping to Python's file flags, but is commonly known as the
     |      ``O_EXCL`` flag in posix.
     |      
     |      The file will be buffered in standard Python style by default, but
     |      can be altered with the ``bufsize`` parameter.  ``0`` turns off
     |      buffering, ``1`` uses line buffering, and any number greater than 1
     |      (``>1``) uses that specific buffer size.
     |      
     |      :param str filename: name of the file to open
     |      :param str mode: mode (Python-style) to open in
     |      :param int bufsize: desired buffering (-1 = default buffer size)
     |      :return: an `.SFTPFile` object representing the open file
     |      
     |      :raises IOError: if the file could not be opened.
     |  
     |  ppuutt(self, localpath, remotepath, callback=None, confirm=True)
     |      Copy a local file (``localpath``) to the SFTP server as ``remotepath``.
     |      Any exception raised by operations will be passed through.  This
     |      method is primarily provided as a convenience.
     |      
     |      The SFTP operations use pipelining for speed.
     |      
     |      :param str localpath: the local file to copy
     |      :param str remotepath: the destination path on the SFTP server. Note
     |          that the filename should be included. Only specifying a directory
     |          may result in an error.
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |      :param bool confirm:
     |          whether to do a stat() on the file afterwards to confirm the file
     |          size
     |      
     |      :return: an `.SFTPAttributes` object containing attributes about the given file
     |      
     |      .. versionadded:: 1.4
     |      .. versionchanged:: 1.7.4
     |          ``callback`` and rich attribute return value added.
     |      .. versionchanged:: 1.7.7
     |          ``confirm`` param added.
     |  
     |  ppuuttffoo(self, fl, remotepath, file_size=0, callback=None, confirm=True)
     |      Copy the contents of an open file object (``fl``) to the SFTP server as
     |      ``remotepath``. Any exception raised by operations will be passed
     |      through.
     |      
     |      The SFTP operations use pipelining for speed.
     |      
     |      :param fl: opened file or file-like object to copy
     |      :param str remotepath: the destination path on the SFTP server
     |      :param int file_size:
     |          optional size parameter passed to callback. If none is specified,
     |          size defaults to 0
     |      :param callable callback:
     |          optional callback function (form: ``func(int, int)``) that accepts
     |          the bytes transferred so far and the total bytes to be transferred
     |          (since 1.7.4)
     |      :param bool confirm:
     |          whether to do a stat() on the file afterwards to confirm the file
     |          size (since 1.7.7)
     |      
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file.
     |      
     |      .. versionadded:: 1.10
     |  
     |  rreeaaddlliinnkk(self, path)
     |      Return the target of a symbolic link (shortcut).  You can use
     |      `symlink` to create these.  The result may be either an absolute or
     |      relative pathname.
     |      
     |      :param str path: path of the symbolic link file
     |      :return: target path, as a `str`
     |  
     |  rreemmoovvee(self, path)
     |      Remove the file at the given path.  This only works on files; for
     |      removing folders (directories), use `rmdir`.
     |      
     |      :param str path: path (absolute or relative) of the file to remove
     |      
     |      :raises IOError: if the path refers to a folder (directory)
     |  
     |  rreennaammee(self, oldpath, newpath)
     |      Rename a file or folder from ``oldpath`` to ``newpath``.
     |      
     |      :param str oldpath: existing name of the file or folder
     |      :param str newpath: new name for the file or folder
     |      
     |      :raises IOError: if ``newpath`` is a folder, or something else goes
     |          wrong
     |  
     |  rrmmddiirr(self, path)
     |      Remove the folder named ``path``.
     |      
     |      :param str path: name of the folder to remove
     |  
     |  ssttaatt(self, path)
     |      Retrieve information about a file on the remote system.  The return
     |      value is an object whose attributes correspond to the attributes of
     |      Python's ``stat`` structure as returned by ``os.stat``, except that it
     |      contains fewer fields.  An SFTP server may return as much or as little
     |      info as it wants, so the results may vary from server to server.
     |      
     |      Unlike a Python `python:stat` object, the result may not be accessed as
     |      a tuple.  This is mostly due to the author's slack factor.
     |      
     |      The fields supported are: ``st_mode``, ``st_size``, ``st_uid``,
     |      ``st_gid``, ``st_atime``, and ``st_mtime``.
     |      
     |      :param str path: the filename to stat
     |      :return:
     |          an `.SFTPAttributes` object containing attributes about the given
     |          file
     |  
     |  ssyymmlliinnkk(self, source, dest)
     |      Create a symbolic link (shortcut) of the ``source`` path at
     |      ``destination``.
     |      
     |      :param str source: path of the original file
     |      :param str dest: path of the newly created symlink
     |  
     |  ttrruunnccaattee(self, path, size)
     |      Change the size of the file specified by ``path``.  This usually
     |      extends or shrinks the size of the file, just like the `~file.truncate`
     |      method on Python file objects.
     |      
     |      :param str path: path of the file to modify
     |      :param size: the new size of the file
     |      :type size: int or long
     |  
     |  uunnlliinnkk = remove(self, path)
     |  
     |  uuttiimmee(self, path, times)
     |      Set the access and modified times of the file specified by ``path``.  If
     |      ``times`` is ``None``, then the file's access and modified times are set
     |      to the current time.  Otherwise, ``times`` must be a 2-tuple of numbers,
     |      of the form ``(atime, mtime)``, which is used to set the access and
     |      modified times, respectively.  This bizarre API is mimicked from Python
     |      for the sake of consistency -- I apologize.
     |      
     |      :param str path: path of the file to modify
     |      :param tuple times:
     |          ``None`` or a tuple of (access time, modified time) in standard
     |          internet epoch time (seconds since 01 January 1970 GMT)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ffrroomm__ttrraannssppoorrtt(cls, t, window_size=None, max_packet_size=None) from __builtin__.type
     |      Create an SFTP client channel from an open `.Transport`.
     |      
     |      Setting the window and packet sizes might affect the transfer speed.
     |      The default settings in the `.Transport` class are the same as in
     |      OpenSSH and should work adequately for both files transfers and
     |      interactive sessions.
     |      
     |      :param .Transport t: an open `.Transport` which is already authenticated
     |      :param int window_size:
     |          optional window size for the `.SFTPClient` session.
     |      :param int max_packet_size:
     |          optional max packet size for the `.SFTPClient` session..
     |      
     |      :return:
     |          a new `.SFTPClient` object, referring to an sftp session (channel)
     |          across the transport
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``window_size`` and ``max_packet_size`` arguments.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.sftp.BaseSFTP:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
    
    class SSFFTTPPEErrrroorr(exceptions.Exception)
     |  Method resolution order:
     |      SFTPError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class SSFFTTPPFFiillee(paramiko.file.BufferedFile)
     |  Proxy object for a file on the remote server, in client mode SFTP.
     |  
     |  Instances of this class may be used as context managers in the same way
     |  that built-in Python file objects are.
     |  
     |  Method resolution order:
     |      SFTPFile
     |      paramiko.file.BufferedFile
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____ddeell____(self)
     |  
     |  ____iinniitt____(self, sftp, handle, mode='r', bufsize=-1)
     |  
     |  cchheecckk(self, hash_algorithm, offset=0, length=0, block_size=0)
     |      Ask the server for a hash of a section of this file.  This can be used
     |      to verify a successful upload or download, or for various rsync-like
     |      operations.
     |      
     |      The file is hashed from ``offset``, for ``length`` bytes.  If ``length``
     |      is 0, the remainder of the file is hashed.  Thus, if both ``offset``
     |      and ``length`` are zero, the entire file is hashed.
     |      
     |      Normally, ``block_size`` will be 0 (the default), and this method will
     |      return a byte string representing the requested hash (for example, a
     |      string of length 16 for MD5, or 20 for SHA-1).  If a non-zero
     |      ``block_size`` is given, each chunk of the file (from ``offset`` to
     |      ``offset + length``) of ``block_size`` bytes is computed as a separate
     |      hash.  The hash results are all concatenated and returned as a single
     |      string.
     |      
     |      For example, ``check('sha1', 0, 1024, 512)`` will return a string of
     |      length 40.  The first 20 bytes will be the SHA-1 of the first 512 bytes
     |      of the file, and the last 20 bytes will be the SHA-1 of the next 512
     |      bytes.
     |      
     |      :param str hash_algorithm:
     |          the name of the hash algorithm to use (normally ``"sha1"`` or
     |          ``"md5"``)
     |      :param offset:
     |          offset into the file to begin hashing (0 means to start from the
     |          beginning)
     |      :type offset: int or long
     |      :param length:
     |          number of bytes to hash (0 means continue to the end of the file)
     |      :type length: int or long
     |      :param int block_size:
     |          number of bytes to hash per result (must not be less than 256; 0
     |          means to compute only one hash of the entire segment)
     |      :type block_size: int
     |      :return:
     |          `str` of bytes representing the hash of each block, concatenated
     |          together
     |      
     |      :raises IOError: if the server doesn't support the "check-file"
     |          extension, or possibly doesn't support the hash algorithm
     |          requested
     |          
     |      .. note:: Many (most?) servers don't support this extension yet.
     |      
     |      .. versionadded:: 1.4
     |  
     |  cchhmmoodd(self, mode)
     |      Change the mode (permissions) of this file.  The permissions are
     |      unix-style and identical to those used by Python's `os.chmod`
     |      function.
     |      
     |      :param int mode: new permissions
     |  
     |  cchhoowwnn(self, uid, gid)
     |      Change the owner (``uid``) and group (``gid``) of this file.  As with
     |      Python's `os.chown` function, you must pass both arguments, so if you
     |      only want to change one, use `stat` first to retrieve the current
     |      owner and group.
     |      
     |      :param int uid: new owner's uid
     |      :param int gid: new group id
     |  
     |  cclloossee(self)
     |      Close the file.
     |  
     |  ggeettttiimmeeoouutt(self)
     |      Returns the timeout in seconds (as a `float`) associated with the
     |      socket or ssh `.Channel` used for this file.
     |      
     |      .. seealso:: `.Channel.gettimeout`
     |  
     |  pprreeffeettcchh(self, file_size)
     |      Pre-fetch the remaining contents of this file in anticipation of future
     |      `.read` calls.  If reading the entire file, pre-fetching can
     |      dramatically improve the download speed by avoiding roundtrip latency.
     |      The file's contents are incrementally buffered in a background thread.
     |      
     |      The prefetched data is stored in a buffer until read via the `.read`
     |      method.  Once data has been read, it's removed from the buffer.  The
     |      data may be read in a random order (using `.seek`); chunks of the
     |      buffer that haven't been read will continue to be buffered.
     |      
     |      .. versionadded:: 1.5.1
     |  
     |  rreeaaddvv(self, chunks)
     |      Read a set of blocks from the file by (offset, length).  This is more
     |      efficient than doing a series of `.seek` and `.read` calls, since the
     |      prefetch machinery is used to retrieve all the requested blocks at
     |      once.
     |      
     |      :param chunks:
     |          a list of (offset, length) tuples indicating which sections of the
     |          file to read
     |      :type chunks: list(tuple(long, int))
     |      :return: a list of blocks read, in the same order as in ``chunks``
     |      
     |      .. versionadded:: 1.5.4
     |  
     |  sseeeekk(self, offset, whence=0)
     |  
     |  sseett__ppiippeelliinneedd(self, pipelined=True)
     |      Turn on/off the pipelining of write operations to this file.  When
     |      pipelining is on, paramiko won't wait for the server response after
     |      each write operation.  Instead, they're collected as they come in. At
     |      the first non-write operation (including `.close`), all remaining
     |      server responses are collected.  This means that if there was an error
     |      with one of your later writes, an exception might be thrown from within
     |      `.close` instead of `.write`.
     |      
     |      By default, files are not pipelined.
     |      
     |      :param bool pipelined:
     |          ``True`` if pipelining should be turned on for this file; ``False``
     |          otherwise
     |      
     |      .. versionadded:: 1.5
     |  
     |  sseettbblloocckkiinngg(self, blocking)
     |      Set blocking or non-blocking mode on the underiying socket or ssh
     |      `.Channel`.
     |      
     |      :param int blocking:
     |          0 to set non-blocking mode; non-0 to set blocking mode.
     |      
     |      .. seealso:: `.Channel.setblocking`
     |  
     |  sseettttiimmeeoouutt(self, timeout)
     |      Set a timeout on read/write operations on the underlying socket or
     |      ssh `.Channel`.
     |      
     |      :param float timeout:
     |          seconds to wait for a pending read/write operation before raising
     |          ``socket.timeout``, or ``None`` for no timeout
     |      
     |      .. seealso:: `.Channel.settimeout`
     |  
     |  ssttaatt(self)
     |      Retrieve information about this file from the remote system.  This is
     |      exactly like `.SFTPClient.stat`, except that it operates on an
     |      already-open file.
     |      
     |      :return: an `.SFTPAttributes` object containing attributes about this file.
     |  
     |  ttrruunnccaattee(self, size)
     |      Change the size of this file.  This usually extends
     |      or shrinks the size of the file, just like the ``truncate()`` method on
     |      Python file objects.
     |      
     |      :param size: the new size of the file
     |      :type size: int or long
     |  
     |  uuttiimmee(self, times)
     |      Set the access and modified times of this file.  If
     |      ``times`` is ``None``, then the file's access and modified times are set
     |      to the current time.  Otherwise, ``times`` must be a 2-tuple of numbers,
     |      of the form ``(atime, mtime)``, which is used to set the access and
     |      modified times, respectively.  This bizarre API is mimicked from Python
     |      for the sake of consistency -- I apologize.
     |      
     |      :param tuple times:
     |          ``None`` or a tuple of (access time, modified time) in standard
     |          internet epoch time (seconds since 01 January 1970 GMT)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  MMAAXX__RREEQQUUEESSTT__SSIIZZEE = 32768
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.file.BufferedFile:
     |  
     |  ____iitteerr____(self)
     |      Returns an iterator that can be used to iterate over the lines in this
     |      file.  This iterator happens to return the file itself, since a file is
     |      its own iterator.
     |      
     |      :raises ValueError: if the file is closed.
     |  
     |  fflluusshh(self)
     |      Write out any data in the write buffer.  This may do nothing if write
     |      buffering is not turned on.
     |  
     |  nneexxtt(self)
     |      Returns the next line from the input, or raises
     |      `~exceptions.StopIteration` when EOF is hit.  Unlike Python file
     |      objects, it's okay to mix calls to `next` and `readline`.
     |      
     |      :raises StopIteration: when the end of the file is reached.
     |      
     |      :return: a line (`str`) read from the file.
     |  
     |  rreeaadd(self, size=None)
     |      Read at most ``size`` bytes from the file (less if we hit the end of the
     |      file first).  If the ``size`` argument is negative or omitted, read all
     |      the remaining data in the file.
     |      
     |      .. note::
     |          ``'b'`` mode flag is ignored (``self.FLAG_BINARY`` in
     |          ``self._flags``), because SSH treats all files as binary, since we
     |          have no idea what encoding the file is in, or even if the file is
     |          text data.
     |      
     |      :param int size: maximum number of bytes to read
     |      :return:
     |          data read from the file (as bytes), or an empty string if EOF was
     |          encountered immediately
     |  
     |  rreeaaddlliinnee(self, size=None)
     |      Read one entire line from the file.  A trailing newline character is
     |      kept in the string (but may be absent when a file ends with an
     |      incomplete line).  If the size argument is present and non-negative, it
     |      is a maximum byte count (including the trailing newline) and an
     |      incomplete line may be returned.  An empty string is returned only when
     |      EOF is encountered immediately.
     |      
     |      .. note::
     |          Unlike stdio's ``fgets``, the returned string contains null
     |          characters (``'\0'``) if they occurred in the input.
     |      
     |      :param int size: maximum length of returned string.
     |      :return:
     |          next line of the file, or an empty string if the end of the
     |          file has been reached.
     |      
     |          If the file was opened in binary (``'b'``) mode: bytes are returned
     |          Else: the encoding of the file is assumed to be UTF-8 and character
     |          strings (`str`) are returned
     |  
     |  rreeaaddlliinneess(self, sizehint=None)
     |      Read all remaining lines using `readline` and return them as a list.
     |      If the optional ``sizehint`` argument is present, instead of reading up
     |      to EOF, whole lines totalling approximately sizehint bytes (possibly
     |      after rounding up to an internal buffer size) are read.
     |      
     |      :param int sizehint: desired maximum number of bytes to read.
     |      :return: `list` of lines read from the file.
     |  
     |  tteellll(self)
     |      Return the file's current position.  This may not be accurate or
     |      useful if the underlying file doesn't support random access, or was
     |      opened in append mode.
     |      
     |      :return: file position (`number <int>` of bytes).
     |  
     |  wwrriittee(self, data)
     |      Write data to the file.  If write buffering is on (``bufsize`` was
     |      specified and non-zero), some or all of the data may not actually be
     |      written yet.  (Use `flush` or `close` to force buffered data to be
     |      written out.)
     |      
     |      :param str data: data to write
     |  
     |  wwrriitteelliinneess(self, sequence)
     |      Write a sequence of strings to the file.  The sequence can be any
     |      iterable object producing strings, typically a list of strings.  (The
     |      name is intended to match `readlines`; `writelines` does not add line
     |      separators.)
     |      
     |      :param iterable sequence: an iterable sequence of strings.
     |  
     |  xxrreeaaddlliinneess(self)
     |      Identical to ``iter(f)``.  This is a deprecated file interface that
     |      predates Python iterator support.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.file.BufferedFile:
     |  
     |  cclloosseedd
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from paramiko.file.BufferedFile:
     |  
     |  FFLLAAGG__AAPPPPEENNDD = 4
     |  
     |  FFLLAAGG__BBIINNAARRYY = 16
     |  
     |  FFLLAAGG__BBUUFFFFEERREEDD = 32
     |  
     |  FFLLAAGG__LLIINNEE__BBUUFFFFEERREEDD = 64
     |  
     |  FFLLAAGG__RREEAADD = 1
     |  
     |  FFLLAAGG__UUNNIIVVEERRSSAALL__NNEEWWLLIINNEE = 128
     |  
     |  FFLLAAGG__WWRRIITTEE = 2
     |  
     |  SSEEEEKK__CCUURR = 1
     |  
     |  SSEEEEKK__EENNDD = 2
     |  
     |  SSEEEEKK__SSEETT = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSFFTTPPHHaannddllee(paramiko.util.ClosingContextManager)
     |  Abstract object representing a handle to an open file (or folder) in an
     |  SFTP server implementation.  Each handle has a string representation used
     |  by the client to refer to the underlying file.
     |  
     |  Server implementations can (and should) subclass SFTPHandle to implement
     |  features of a file handle, like `stat` or `chattr`.
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  Method resolution order:
     |      SFTPHandle
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, flags=0)
     |      Create a new file handle representing a local file being served over
     |      SFTP.  If ``flags`` is passed in, it's used to determine if the file
     |      is open in append mode.
     |      
     |      :param int flags: optional flags as passed to `.SFTPServerInterface.open`
     |  
     |  cchhaattttrr(self, attr)
     |      Change the attributes of this file.  The ``attr`` object will contain
     |      only those fields provided by the client in its request, so you should
     |      check for the presence of fields before using them.
     |      
     |      :param .SFTPAttributes attr: the attributes to change on this file.
     |      :return: an `int` error code like `.SFTP_OK`.
     |  
     |  cclloossee(self)
     |      When a client closes a file, this method is called on the handle.
     |      Normally you would use this method to close the underlying OS level
     |      file object(s).
     |      
     |      The default implementation checks for attributes on ``self`` named
     |      ``readfile`` and/or ``writefile``, and if either or both are present,
     |      their ``close()`` methods are called.  This means that if you are
     |      using the default implementations of `read` and `write`, this
     |      method's default implementation should be fine also.
     |  
     |  rreeaadd(self, offset, length)
     |      Read up to ``length`` bytes from this file, starting at position
     |      ``offset``.  The offset may be a Python long, since SFTP allows it
     |      to be 64 bits.
     |      
     |      If the end of the file has been reached, this method may return an
     |      empty string to signify EOF, or it may also return `.SFTP_EOF`.
     |      
     |      The default implementation checks for an attribute on ``self`` named
     |      ``readfile``, and if present, performs the read operation on the Python
     |      file-like object found there.  (This is meant as a time saver for the
     |      common case where you are wrapping a Python file object.)
     |      
     |      :param offset: position in the file to start reading from.
     |      :type offset: int or long
     |      :param int length: number of bytes to attempt to read.
     |      :return: data read from the file, or an SFTP error code, as a `str`.
     |  
     |  ssttaatt(self)
     |      Return an `.SFTPAttributes` object referring to this open file, or an
     |      error code.  This is equivalent to `.SFTPServerInterface.stat`, except
     |      it's called on an open file instead of a path.
     |      
     |      :return:
     |          an attributes object for the given file, or an SFTP error code
     |          (like `.SFTP_PERMISSION_DENIED`).
     |      :rtype: `.SFTPAttributes` or error code
     |  
     |  wwrriittee(self, offset, data)
     |      Write ``data`` into this file at position ``offset``.  Extending the
     |      file past its original end is expected.  Unlike Python's normal
     |      ``write()`` methods, this method cannot do a partial write: it must
     |      write all of ``data`` or else return an error.
     |      
     |      The default implementation checks for an attribute on ``self`` named
     |      ``writefile``, and if present, performs the write operation on the
     |      Python file-like object found there.  The attribute is named
     |      differently from ``readfile`` to make it easy to implement read-only
     |      (or write-only) files, but if both attributes are present, they should
     |      refer to the same file.
     |      
     |      :param offset: position in the file to start reading from.
     |      :type offset: int or long
     |      :param str data: data to write into the file.
     |      :return: an SFTP error code like `.SFTP_OK`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSFFTTPPSSeerrvveerr(paramiko.sftp.BaseSFTP, paramiko.server.SubsystemHandler)
     |  Server-side SFTP subsystem support.  Since this is a `.SubsystemHandler`,
     |  it can be (and is meant to be) set as the handler for ``"sftp"`` requests.
     |  Use `.Transport.set_subsystem_handler` to activate this class.
     |  
     |  Method resolution order:
     |      SFTPServer
     |      paramiko.sftp.BaseSFTP
     |      paramiko.server.SubsystemHandler
     |      threading.Thread
     |      threading._Verbose
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, channel, name, server, sftp_si=<class 'paramiko.sftp_si.SFTPServerInterface'>, *largs, **kwargs)
     |      The constructor for SFTPServer is meant to be called from within the
     |      `.Transport` as a subsystem handler.  ``server`` and any additional
     |      parameters or keyword parameters are passed from the original call to
     |      `.Transport.set_subsystem_handler`.
     |      
     |      :param .Channel channel: channel passed from the `.Transport`.
     |      :param str name: name of the requested subsystem.
     |      :param .ServerInterface server:
     |          the server object associated with this channel and subsystem
     |      :param class sftp_si:
     |          a subclass of `.SFTPServerInterface` to use for handling individual
     |          requests.
     |  
     |  ffiinniisshh__ssuubbssyysstteemm(self)
     |  
     |  ssttaarrtt__ssuubbssyysstteemm(self, name, transport, channel)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ccoonnvveerrtt__eerrrrnnoo(e)
     |      Convert an errno value (as from an ``OSError`` or ``IOError``) into a
     |      standard SFTP result code.  This is a convenience function for trapping
     |      exceptions in server code and returning an appropriate result.
     |      
     |      :param int e: an errno code, as from ``OSError.errno``.
     |      :return: an `int` SFTP error code like ``SFTP_NO_SUCH_FILE``.
     |  
     |  sseett__ffiillee__aattttrr(filename, attr)
     |      Change a file's attributes on the local filesystem.  The contents of
     |      ``attr`` are used to change the permissions, owner, group ownership,
     |      and/or modification & access time of the file, depending on which
     |      attributes are present in ``attr``.
     |      
     |      This is meant to be a handy helper function for translating SFTP file
     |      requests into local file operations.
     |      
     |      :param str filename:
     |          name of the file to alter (should usually be an absolute path).
     |      :param .SFTPAttributes attr: attributes to change.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.sftp.BaseSFTP:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.server.SubsystemHandler:
     |  
     |  ggeett__sseerrvveerr(self)
     |      Return the `.ServerInterface` object associated with this channel and
     |      subsystem.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  ____rreepprr____(self)
     |  
     |  ggeettNNaammee(self)
     |  
     |  iissAAlliivvee(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  iissDDaaeemmoonn(self)
     |  
     |  iiss__aalliivvee = isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  jjooiinn(self, timeout=None)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  rruunn(self)
     |      Method representing the thread's activity.
     |      
     |      You may override this method in a subclass. The standard run() method
     |      invokes the callable object passed to the object's constructor as the
     |      target argument, if any, with sequential and keyword arguments taken
     |      from the args and kwargs arguments, respectively.
     |  
     |  sseettDDaaeemmoonn(self, daemonic)
     |  
     |  sseettNNaammee(self, name)
     |  
     |  ssttaarrtt(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  ddaaeemmoonn
     |      A boolean value indicating whether this thread is a daemon thread (True) or not (False).
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  iiddeenntt
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the thread.get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  nnaammee
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.
    
    class SSFFTTPPSSeerrvveerrIInntteerrffaaccee(__builtin__.object)
     |  This class defines an interface for controlling the behavior of paramiko
     |  when using the `.SFTPServer` subsystem to provide an SFTP server.
     |  
     |  Methods on this class are called from the SFTP session's thread, so you can
     |  block as long as necessary without affecting other sessions (even other
     |  SFTP sessions).  However, raising an exception will usually cause the SFTP
     |  session to abruptly end, so you will usually want to catch exceptions and
     |  return an appropriate error code.
     |  
     |  All paths are in string form instead of unicode because not all SFTP
     |  clients & servers obey the requirement that paths be encoded in UTF-8.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, server, *largs, **kwargs)
     |      Create a new SFTPServerInterface object.  This method does nothing by
     |      default and is meant to be overridden by subclasses.
     |      
     |      :param .ServerInterface server:
     |          the server object associated with this channel and SFTP subsystem
     |  
     |  ccaannoonniiccaalliizzee(self, path)
     |      Return the canonical form of a path on the server.  For example,
     |      if the server's home folder is ``/home/foo``, the path
     |      ``"../betty"`` would be canonicalized to ``"/home/betty"``.  Note
     |      the obvious security issues: if you're serving files only from a
     |      specific folder, you probably don't want this method to reveal path
     |      names outside that folder.
     |      
     |      You may find the Python methods in ``os.path`` useful, especially
     |      ``os.path.normpath`` and ``os.path.realpath``.
     |      
     |      The default implementation returns ``os.path.normpath('/' + path)``.
     |  
     |  cchhaattttrr(self, path, attr)
     |      Change the attributes of a file.  The ``attr`` object will contain
     |      only those fields provided by the client in its request, so you
     |      should check for the presence of fields before using them.
     |      
     |      :param str path:
     |          requested path (relative or absolute) of the file to change.
     |      :param attr:
     |          requested attributes to change on the file (an `.SFTPAttributes`
     |          object)
     |      :return: an error code `int` like `.SFTP_OK`.
     |  
     |  lliisstt__ffoollddeerr(self, path)
     |      Return a list of files within a given folder.  The ``path`` will use
     |      posix notation (``"/"`` separates folder names) and may be an absolute
     |      or relative path.
     |      
     |      The list of files is expected to be a list of `.SFTPAttributes`
     |      objects, which are similar in structure to the objects returned by
     |      ``os.stat``.  In addition, each object should have its ``filename``
     |      field filled in, since this is important to a directory listing and
     |      not normally present in ``os.stat`` results.  The method
     |      `.SFTPAttributes.from_stat` will usually do what you want.
     |      
     |      In case of an error, you should return one of the ``SFTP_*`` error
     |      codes, such as `.SFTP_PERMISSION_DENIED`.
     |      
     |      :param str path: the requested path (relative or absolute) to be listed.
     |      :return:
     |          a list of the files in the given folder, using `.SFTPAttributes`
     |          objects.
     |      
     |      .. note::
     |          You should normalize the given ``path`` first (see the `os.path`
     |          module) and check appropriate permissions before returning the list
     |          of files.  Be careful of malicious clients attempting to use
     |          relative paths to escape restricted folders, if you're doing a
     |          direct translation from the SFTP server path to your local
     |          filesystem.
     |  
     |  llssttaatt(self, path)
     |      Return an `.SFTPAttributes` object for a path on the server, or an
     |      error code.  If your server supports symbolic links (also known as
     |      "aliases"), you should not follow them -- instead, you should
     |      return data on the symlink or alias itself.  (`stat` is the
     |      corresponding call that follows symlinks/aliases.)
     |      
     |      :param str path:
     |          the requested path (relative or absolute) to fetch file statistics
     |          for.
     |      :type path: str
     |      :return:
     |          an `.SFTPAttributes` object for the given file, or an SFTP error
     |          code (like `.SFTP_PERMISSION_DENIED`).
     |  
     |  mmkkddiirr(self, path, attr)
     |      Create a new directory with the given attributes.  The ``attr``
     |      object may be considered a "hint" and ignored.
     |      
     |      The ``attr`` object will contain only those fields provided by the
     |      client in its request, so you should use ``hasattr`` to check for
     |      the presense of fields before using them.  In some cases, the ``attr``
     |      object may be completely empty.
     |      
     |      :param str path:
     |          requested path (relative or absolute) of the new folder.
     |      :param .SFTPAttributes attr: requested attributes of the new folder.
     |      :return: an SFTP error code `int` like `.SFTP_OK`.
     |  
     |  ooppeenn(self, path, flags, attr)
     |      Open a file on the server and create a handle for future operations
     |      on that file.  On success, a new object subclassed from `.SFTPHandle`
     |      should be returned.  This handle will be used for future operations
     |      on the file (read, write, etc).  On failure, an error code such as
     |      `.SFTP_PERMISSION_DENIED` should be returned.
     |      
     |      ``flags`` contains the requested mode for opening (read-only,
     |      write-append, etc) as a bitset of flags from the ``os`` module:
     |      
     |          - ``os.O_RDONLY``
     |          - ``os.O_WRONLY``
     |          - ``os.O_RDWR``
     |          - ``os.O_APPEND``
     |          - ``os.O_CREAT``
     |          - ``os.O_TRUNC``
     |          - ``os.O_EXCL``
     |      
     |      (One of ``os.O_RDONLY``, ``os.O_WRONLY``, or ``os.O_RDWR`` will always
     |      be set.)
     |      
     |      The ``attr`` object contains requested attributes of the file if it
     |      has to be created.  Some or all attribute fields may be missing if
     |      the client didn't specify them.
     |      
     |      .. note:: The SFTP protocol defines all files to be in "binary" mode.
     |          There is no equivalent to Python's "text" mode.
     |      
     |      :param str path:
     |          the requested path (relative or absolute) of the file to be opened.
     |      :param int flags:
     |          flags or'd together from the ``os`` module indicating the requested
     |          mode for opening the file.
     |      :param .SFTPAttributes attr:
     |          requested attributes of the file if it is newly created.
     |      :return: a new `.SFTPHandle` or error code.
     |  
     |  rreeaaddlliinnkk(self, path)
     |      Return the target of a symbolic link (or shortcut) on the server.
     |      If the specified path doesn't refer to a symbolic link, an error
     |      should be returned.
     |      
     |      :param str path: path (relative or absolute) of the symbolic link.
     |      :return:
     |          the target `str` path of the symbolic link, or an error code like
     |          `.SFTP_NO_SUCH_FILE`.
     |  
     |  rreemmoovvee(self, path)
     |      Delete a file, if possible.
     |      
     |      :param str path:
     |          the requested path (relative or absolute) of the file to delete.
     |      :return: an SFTP error code `int` like `.SFTP_OK`.
     |  
     |  rreennaammee(self, oldpath, newpath)
     |      Rename (or move) a file.  The SFTP specification implies that this
     |      method can be used to move an existing file into a different folder,
     |      and since there's no other (easy) way to move files via SFTP, it's
     |      probably a good idea to implement "move" in this method too, even for
     |      files that cross disk partition boundaries, if at all possible.
     |      
     |      .. note:: You should return an error if a file with the same name as
     |          ``newpath`` already exists.  (The rename operation should be
     |          non-desctructive.)
     |      
     |      :param str oldpath:
     |          the requested path (relative or absolute) of the existing file.
     |      :param str newpath: the requested new path of the file.
     |      :return: an SFTP error code `int` like `.SFTP_OK`.
     |  
     |  rrmmddiirr(self, path)
     |      Remove a directory if it exists.  The ``path`` should refer to an
     |      existing, empty folder -- otherwise this method should return an
     |      error.
     |      
     |      :param str path:
     |          requested path (relative or absolute) of the folder to remove.
     |      :return: an SFTP error code `int` like `.SFTP_OK`.
     |  
     |  sseessssiioonn__eennddeedd(self)
     |      The SFTP server session has just ended, either cleanly or via an
     |      exception.  This method is meant to be overridden to perform any
     |      necessary cleanup before this `.SFTPServerInterface` object is
     |      destroyed.
     |  
     |  sseessssiioonn__ssttaarrtteedd(self)
     |      The SFTP server session has just started.  This method is meant to be
     |      overridden to perform any necessary setup before handling callbacks
     |      from SFTP operations.
     |  
     |  ssttaatt(self, path)
     |      Return an `.SFTPAttributes` object for a path on the server, or an
     |      error code.  If your server supports symbolic links (also known as
     |      "aliases"), you should follow them.  (`lstat` is the corresponding
     |      call that doesn't follow symlinks/aliases.)
     |      
     |      :param str path:
     |          the requested path (relative or absolute) to fetch file statistics
     |          for.
     |      :return:
     |          an `.SFTPAttributes` object for the given file, or an SFTP error
     |          code (like `.SFTP_PERMISSION_DENIED`).
     |  
     |  ssyymmlliinnkk(self, target_path, path)
     |      Create a symbolic link on the server, as new pathname ``path``,
     |      with ``target_path`` as the target of the link.
     |      
     |      :param str target_path:
     |          path (relative or absolute) of the target for this new symbolic
     |          link.
     |      :param str path:
     |          path (relative or absolute) of the symbolic link to create.
     |      :return: an error code `int` like ``SFTP_OK``.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSSSHHCClliieenntt(paramiko.util.ClosingContextManager)
     |  A high-level representation of a session with an SSH server.  This class
     |  wraps `.Transport`, `.Channel`, and `.SFTPClient` to take care of most
     |  aspects of authenticating and opening channels.  A typical use case is::
     |  
     |      client = SSHClient()
     |      client.load_system_host_keys()
     |      client.connect('ssh.example.com')
     |      stdin, stdout, stderr = client.exec_command('ls -l')
     |  
     |  You may pass in explicit overrides for authentication and server host key
     |  checking.  The default mechanism is to try to use local key files or an
     |  SSH agent (if one is running).
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  .. versionadded:: 1.6
     |  
     |  Method resolution order:
     |      SSHClient
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Create a new SSHClient.
     |  
     |  cclloossee(self)
     |      Close this SSHClient and its underlying `.Transport`.
     |  
     |  ccoonnnneecctt(self, hostname, port=22, username=None, password=None, pkey=None, key_filename=None, timeout=None, allow_agent=True, look_for_keys=True, compress=False, sock=None, gss_auth=False, gss_kex=False, gss_deleg_creds=True, gss_host=None, banner_timeout=None)
     |      Connect to an SSH server and authenticate to it.  The server's host key
     |      is checked against the system host keys (see `load_system_host_keys`)
     |      and any local host keys (`load_host_keys`).  If the server's hostname
     |      is not found in either set of host keys, the missing host key policy
     |      is used (see `set_missing_host_key_policy`).  The default policy is
     |      to reject the key and raise an `.SSHException`.
     |      
     |      Authentication is attempted in the following order of priority:
     |      
     |          - The ``pkey`` or ``key_filename`` passed in (if any)
     |          - Any key we can find through an SSH agent
     |          - Any "id_rsa", "id_dsa" or "id_ecdsa" key discoverable in
     |            ``~/.ssh/``
     |          - Plain username/password auth, if a password was given
     |      
     |      If a private key requires a password to unlock it, and a password is
     |      passed in, that password will be used to attempt to unlock the key.
     |      
     |      :param str hostname: the server to connect to
     |      :param int port: the server port to connect to
     |      :param str username:
     |          the username to authenticate as (defaults to the current local
     |          username)
     |      :param str password:
     |          a password to use for authentication or for unlocking a private key
     |      :param .PKey pkey: an optional private key to use for authentication
     |      :param str key_filename:
     |          the filename, or list of filenames, of optional private key(s) to
     |          try for authentication
     |      :param float timeout:
     |          an optional timeout (in seconds) for the TCP connect
     |      :param bool allow_agent:
     |          set to False to disable connecting to the SSH agent
     |      :param bool look_for_keys:
     |          set to False to disable searching for discoverable private key
     |          files in ``~/.ssh/``
     |      :param bool compress: set to True to turn on compression
     |      :param socket sock:
     |          an open socket or socket-like object (such as a `.Channel`) to use
     |          for communication to the target host
     |      :param bool gss_auth:
     |          ``True`` if you want to use GSS-API authentication
     |      :param bool gss_kex:
     |          Perform GSS-API Key Exchange and user authentication
     |      :param bool gss_deleg_creds: Delegate GSS-API client credentials or not
     |      :param str gss_host:
     |          The targets name in the kerberos database. default: hostname
     |      :param float banner_timeout: an optional timeout (in seconds) to wait
     |          for the SSH banner to be presented.
     |      
     |      :raises BadHostKeyException: if the server's host key could not be
     |          verified
     |      :raises AuthenticationException: if authentication failed
     |      :raises SSHException: if there was any other error connecting or
     |          establishing an SSH session
     |      :raises socket.error: if a socket error occurred while connecting
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``banner_timeout``, ``gss_auth``, ``gss_kex``,
     |          ``gss_deleg_creds`` and ``gss_host`` arguments.
     |  
     |  eexxeecc__ccoommmmaanndd(self, command, bufsize=-1, timeout=None, get_pty=False)
     |      Execute a command on the SSH server.  A new `.Channel` is opened and
     |      the requested command is executed.  The command's input and output
     |      streams are returned as Python ``file``-like objects representing
     |      stdin, stdout, and stderr.
     |      
     |      :param str command: the command to execute
     |      :param int bufsize:
     |          interpreted the same way as by the built-in ``file()`` function in
     |          Python
     |      :param int timeout:
     |          set command's channel timeout. See `Channel.settimeout`.settimeout
     |      :return:
     |          the stdin, stdout, and stderr of the executing command, as a
     |          3-tuple
     |      
     |      :raises SSHException: if the server fails to execute the command
     |  
     |  ggeett__hhoosstt__kkeeyyss(self)
     |      Get the local `.HostKeys` object.  This can be used to examine the
     |      local host keys or change them.
     |      
     |      :return: the local host keys as a `.HostKeys` object.
     |  
     |  ggeett__ttrraannssppoorrtt(self)
     |      Return the underlying `.Transport` object for this SSH connection.
     |      This can be used to perform lower-level tasks, like opening specific
     |      kinds of channels.
     |      
     |      :return: the `.Transport` for this connection
     |  
     |  iinnvvookkee__sshheellll(self, term='vt100', width=80, height=24, width_pixels=0, height_pixels=0)
     |      Start an interactive shell session on the SSH server.  A new `.Channel`
     |      is opened and connected to a pseudo-terminal using the requested
     |      terminal type and size.
     |      
     |      :param str term:
     |          the terminal type to emulate (for example, ``"vt100"``)
     |      :param int width: the width (in characters) of the terminal window
     |      :param int height: the height (in characters) of the terminal window
     |      :param int width_pixels: the width (in pixels) of the terminal window
     |      :param int height_pixels: the height (in pixels) of the terminal window
     |      :return: a new `.Channel` connected to the remote shell
     |      
     |      :raises SSHException: if the server fails to invoke a shell
     |  
     |  llooaadd__hhoosstt__kkeeyyss(self, filename)
     |      Load host keys from a local host-key file.  Host keys read with this
     |      method will be checked after keys loaded via `load_system_host_keys`,
     |      but will be saved back by `save_host_keys` (so they can be modified).
     |      The missing host key policy `.AutoAddPolicy` adds keys to this set and
     |      saves them, when connecting to a previously-unknown server.
     |      
     |      This method can be called multiple times.  Each new set of host keys
     |      will be merged with the existing set (new replacing old if there are
     |      conflicts).  When automatically saving, the last hostname is used.
     |      
     |      :param str filename: the filename to read
     |      
     |      :raises IOError: if the filename could not be read
     |  
     |  llooaadd__ssyysstteemm__hhoosstt__kkeeyyss(self, filename=None)
     |      Load host keys from a system (read-only) file.  Host keys read with
     |      this method will not be saved back by `save_host_keys`.
     |      
     |      This method can be called multiple times.  Each new set of host keys
     |      will be merged with the existing set (new replacing old if there are
     |      conflicts).
     |      
     |      If ``filename`` is left as ``None``, an attempt will be made to read
     |      keys from the user's local "known hosts" file, as used by OpenSSH,
     |      and no exception will be raised if the file can't be read.  This is
     |      probably only useful on posix.
     |      
     |      :param str filename: the filename to read, or ``None``
     |      
     |      :raises IOError:
     |          if a filename was provided and the file could not be read
     |  
     |  ooppeenn__ssffttpp(self)
     |      Open an SFTP session on the SSH server.
     |      
     |      :return: a new `.SFTPClient` session object
     |  
     |  ssaavvee__hhoosstt__kkeeyyss(self, filename)
     |      Save the host keys back to a file.  Only the host keys loaded with
     |      `load_host_keys` (plus any added directly) will be saved -- not any
     |      host keys loaded with `load_system_host_keys`.
     |      
     |      :param str filename: the filename to save to
     |      
     |      :raises IOError: if the file could not be written
     |  
     |  sseett__lloogg__cchhaannnneell(self, name)
     |      Set the channel for logging.  The default is ``"paramiko.transport"``
     |      but it can be set to anything you want.
     |      
     |      :param str name: new channel name for logging
     |  
     |  sseett__mmiissssiinngg__hhoosstt__kkeeyy__ppoolliiccyy(self, policy)
     |      Set the policy to use when connecting to a server that doesn't have a
     |      host key in either the system or local `.HostKeys` objects.  The
     |      default policy is to reject all unknown servers (using `.RejectPolicy`).
     |      You may substitute `.AutoAddPolicy` or write your own policy class.
     |      
     |      :param .MissingHostKeyPolicy policy:
     |          the policy to use when receiving a host key from a
     |          previously-unknown server
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSSSHHCCoonnffiigg(__builtin__.object)
     |  Representation of config information as stored in the format used by
     |  OpenSSH. Queries can be made via `lookup`. The format is described in
     |  OpenSSH's ``ssh_config`` man page. This class is provided primarily as a
     |  convenience to posix users (since the OpenSSH format is a de-facto
     |  standard on posix) but should work fine on Windows too.
     |  
     |  .. versionadded:: 1.6
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self)
     |      Create a new OpenSSH config object.
     |  
     |  ggeett__hhoossttnnaammeess(self)
     |      Return the set of literal hostnames defined in the SSH config (both
     |      explicit hostnames and wildcard entries).
     |  
     |  llooookkuupp(self, hostname)
     |      Return a dict of config options for a given hostname.
     |      
     |      The host-matching rules of OpenSSH's ``ssh_config`` man page are used:
     |      For each parameter, the first obtained value will be used.  The
     |      configuration files contain sections separated by ``Host``
     |      specifications, and that section is only applied for hosts that match
     |      one of the patterns given in the specification.
     |      
     |      Since the first obtained value for each parameter is used, more host-
     |      specific declarations should be given near the beginning of the file,
     |      and general defaults at the end.
     |      
     |      The keys in the returned dict are all normalized to lowercase (look for
     |      ``"port"``, not ``"Port"``. The values are processed according to the
     |      rules for substitution variable expansion in ``ssh_config``.
     |      
     |      :param str hostname: the hostname to lookup
     |  
     |  ppaarrssee(self, file_obj)
     |      Read an OpenSSH config from the given file object.
     |      
     |      :param file_obj: a file-like object to read the config file from
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  SSEETTTTIINNGGSS__RREEGGEEXX = <_sre.SRE_Pattern object>
    
    class SSSSHHEExxcceeppttiioonn(exceptions.Exception)
     |  Exception raised by failures in SSH2 protocol negotiation or logic errors.
     |  
     |  Method resolution order:
     |      SSHException
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee
    
    class SSeeccuurriittyyOOppttiioonnss(__builtin__.object)
     |  Simple object containing the security preferences of an ssh transport.
     |  These are tuples of acceptable ciphers, digests, key types, and key
     |  exchange algorithms, listed in order of preference.
     |  
     |  Changing the contents and/or order of these fields affects the underlying
     |  `.Transport` (but only if you change them before starting the session).
     |  If you try to add an algorithm that paramiko doesn't recognize,
     |  ``ValueError`` will be raised.  If you try to assign something besides a
     |  tuple to one of the fields, ``TypeError`` will be raised.
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, transport)
     |  
     |  ____rreepprr____(self)
     |      Returns a string representation of this object, for debugging.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  cciipphheerrss
     |      Symmetric encryption ciphers
     |  
     |  ccoommpprreessssiioonn
     |      Compression algorithms
     |  
     |  ddiiggeessttss
     |      Digest (one-way hash) algorithms
     |  
     |  kkeexx
     |      Key exchange algorithms
     |  
     |  kkeeyy__ttyyppeess
     |      Public-key algorithms
    
    class SSeerrvveerrIInntteerrffaaccee(__builtin__.object)
     |  This class defines an interface for controlling the behavior of Paramiko
     |  in server mode.
     |  
     |  Methods on this class are called from Paramiko's primary thread, so you
     |  shouldn't do too much work in them.  (Certainly nothing that blocks or
     |  sleeps.)
     |  
     |  Methods defined here:
     |  
     |  ccaanncceell__ppoorrtt__ffoorrwwaarrdd__rreeqquueesstt(self, address, port)
     |      The client would like to cancel a previous port-forwarding request.
     |      If the given address and port is being forwarded across this ssh
     |      connection, the port should be closed.
     |      
     |      :param str address: the forwarded address
     |      :param int port: the forwarded port
     |  
     |  cchheecckk__aauutthh__ggssssaappii__kkeeyyeexx(self, username, gss_authenticated=2, cc_file=None)
     |      Authenticate the given user to the server if he is a valid krb5
     |      principal and GSS-API Key Exchange was performed.
     |      If GSS-API Key Exchange was not performed, this authentication method
     |      won't be available.
     |      
     |      :param str username: The username of the authenticating client
     |      :param int gss_authenticated: The result of the krb5 authentication
     |      :param str cc_filename: The krb5 client credentials cache filename
     |      :return: `.AUTH_FAILED` if the user is not authenticated otherwise
     |               `.AUTH_SUCCESSFUL`
     |      :rtype: int
     |      :note: Kerberos credential delegation is not supported.
     |      :see: `.ssh_gss` `.kex_gss` 
     |      :note: : We are just checking in L{AuthHandler} that the given user is
     |               a valid krb5 principal!
     |               We don't check if the krb5 principal is allowed to log in on
     |               the server, because there is no way to do that in python. So
     |               if you develop your own SSH server with paramiko for a cetain
     |               plattform like Linux, you should call C{krb5_kuserok()} in your
     |               local kerberos library to make sure that the krb5_principal has
     |               an account on the server and is allowed to log in as a user.
     |      :see: `http://www.unix.com/man-page/all/3/krb5_kuserok/`
     |  
     |  cchheecckk__aauutthh__ggssssaappii__wwiitthh__mmiicc(self, username, gss_authenticated=2, cc_file=None)
     |      Authenticate the given user to the server if he is a valid krb5
     |      principal.
     |      
     |      :param str username: The username of the authenticating client
     |      :param int gss_authenticated: The result of the krb5 authentication
     |      :param str cc_filename: The krb5 client credentials cache filename
     |      :return: `.AUTH_FAILED` if the user is not authenticated otherwise
     |               `.AUTH_SUCCESSFUL`
     |      :rtype: int
     |      :note: Kerberos credential delegation is not supported.
     |      :see: `.ssh_gss`
     |      :note: : We are just checking in L{AuthHandler} that the given user is
     |               a valid krb5 principal!
     |               We don't check if the krb5 principal is allowed to log in on
     |               the server, because there is no way to do that in python. So
     |               if you develop your own SSH server with paramiko for a cetain
     |               plattform like Linux, you should call C{krb5_kuserok()} in your
     |               local kerberos library to make sure that the krb5_principal has
     |               an account on the server and is allowed to log in as a user.
     |      :see: `http://www.unix.com/man-page/all/3/krb5_kuserok/`
     |  
     |  cchheecckk__aauutthh__iinntteerraaccttiivvee(self, username, submethods)
     |      Begin an interactive authentication challenge, if supported.  You
     |      should override this method in server mode if you want to support the
     |      ``"keyboard-interactive"`` auth type, which requires you to send a
     |      series of questions for the client to answer.
     |      
     |      Return `.AUTH_FAILED` if this auth method isn't supported.  Otherwise,
     |      you should return an `.InteractiveQuery` object containing the prompts
     |      and instructions for the user.  The response will be sent via a call
     |      to `check_auth_interactive_response`.
     |      
     |      The default implementation always returns `.AUTH_FAILED`.
     |      
     |      :param str username: the username of the authenticating client
     |      :param str submethods:
     |          a comma-separated list of methods preferred by the client (usually
     |          empty)
     |      :return:
     |          `.AUTH_FAILED` if this auth method isn't supported; otherwise an
     |          object containing queries for the user
     |      :rtype: int or `.InteractiveQuery`
     |  
     |  cchheecckk__aauutthh__iinntteerraaccttiivvee__rreessppoonnssee(self, responses)
     |      Continue or finish an interactive authentication challenge, if
     |      supported.  You should override this method in server mode if you want
     |      to support the ``"keyboard-interactive"`` auth type.
     |      
     |      Return `.AUTH_FAILED` if the responses are not accepted,
     |      `.AUTH_SUCCESSFUL` if the responses are accepted and complete
     |      the authentication, or `.AUTH_PARTIALLY_SUCCESSFUL` if your
     |      authentication is stateful, and this set of responses is accepted for
     |      authentication, but more authentication is required.  (In this latter
     |      case, `get_allowed_auths` will be called to report to the client what
     |      options it has for continuing the authentication.)
     |      
     |      If you wish to continue interactive authentication with more questions,
     |      you may return an `.InteractiveQuery` object, which should cause the
     |      client to respond with more answers, calling this method again.  This
     |      cycle can continue indefinitely.
     |      
     |      The default implementation always returns `.AUTH_FAILED`.
     |      
     |      :param list responses: list of `str` responses from the client
     |      :return:
     |          `.AUTH_FAILED` if the authentication fails; `.AUTH_SUCCESSFUL` if
     |          it succeeds; `.AUTH_PARTIALLY_SUCCESSFUL` if the interactive auth
     |          is successful, but authentication must continue; otherwise an
     |          object containing queries for the user
     |      :rtype: int or `.InteractiveQuery`
     |  
     |  cchheecckk__aauutthh__nnoonnee(self, username)
     |      Determine if a client may open channels with no (further)
     |      authentication.
     |      
     |      Return `.AUTH_FAILED` if the client must authenticate, or
     |      `.AUTH_SUCCESSFUL` if it's okay for the client to not
     |      authenticate.
     |      
     |      The default implementation always returns `.AUTH_FAILED`.
     |      
     |      :param str username: the username of the client.
     |      :return:
     |          `.AUTH_FAILED` if the authentication fails; `.AUTH_SUCCESSFUL` if
     |          it succeeds.
     |      :rtype: int
     |  
     |  cchheecckk__aauutthh__ppaasssswwoorrdd(self, username, password)
     |      Determine if a given username and password supplied by the client is
     |      acceptable for use in authentication.
     |      
     |      Return `.AUTH_FAILED` if the password is not accepted,
     |      `.AUTH_SUCCESSFUL` if the password is accepted and completes
     |      the authentication, or `.AUTH_PARTIALLY_SUCCESSFUL` if your
     |      authentication is stateful, and this key is accepted for
     |      authentication, but more authentication is required.  (In this latter
     |      case, `get_allowed_auths` will be called to report to the client what
     |      options it has for continuing the authentication.)
     |      
     |      The default implementation always returns `.AUTH_FAILED`.
     |      
     |      :param str username: the username of the authenticating client.
     |      :param str password: the password given by the client.
     |      :return:
     |          `.AUTH_FAILED` if the authentication fails; `.AUTH_SUCCESSFUL` if
     |          it succeeds; `.AUTH_PARTIALLY_SUCCESSFUL` if the password auth is
     |          successful, but authentication must continue.
     |      :rtype: int
     |  
     |  cchheecckk__aauutthh__ppuubblliicckkeeyy(self, username, key)
     |      Determine if a given key supplied by the client is acceptable for use
     |      in authentication.  You should override this method in server mode to
     |      check the username and key and decide if you would accept a signature
     |      made using this key.
     |      
     |      Return `.AUTH_FAILED` if the key is not accepted,
     |      `.AUTH_SUCCESSFUL` if the key is accepted and completes the
     |      authentication, or `.AUTH_PARTIALLY_SUCCESSFUL` if your
     |      authentication is stateful, and this password is accepted for
     |      authentication, but more authentication is required.  (In this latter
     |      case, `get_allowed_auths` will be called to report to the client what
     |      options it has for continuing the authentication.)
     |      
     |      Note that you don't have to actually verify any key signtature here.
     |      If you're willing to accept the key, Paramiko will do the work of
     |      verifying the client's signature.
     |      
     |      The default implementation always returns `.AUTH_FAILED`.
     |      
     |      :param str username: the username of the authenticating client
     |      :param .PKey key: the key object provided by the client
     |      :return:
     |          `.AUTH_FAILED` if the client can't authenticate with this key;
     |          `.AUTH_SUCCESSFUL` if it can; `.AUTH_PARTIALLY_SUCCESSFUL` if it
     |          can authenticate with this key but must continue with
     |          authentication
     |      :rtype: int
     |  
     |  cchheecckk__cchhaannnneell__ddiirreecctt__ttccppiipp__rreeqquueesstt(self, chanid, origin, destination)
     |      Determine if a local port forwarding channel will be granted, and
     |      return ``OPEN_SUCCEEDED`` or an error code.  This method is
     |      called in server mode when the client requests a channel, after
     |      authentication is complete.
     |      
     |      The ``chanid`` parameter is a small number that uniquely identifies the
     |      channel within a `.Transport`.  A `.Channel` object is not created
     |      unless this method returns ``OPEN_SUCCEEDED`` -- once a
     |      `.Channel` object is created, you can call `.Channel.get_id` to
     |      retrieve the channel ID.
     |      
     |      The origin and destination parameters are (ip_address, port) tuples
     |      that correspond to both ends of the TCP connection in the forwarding
     |      tunnel.
     |      
     |      The return value should either be ``OPEN_SUCCEEDED`` (or
     |      ``0``) to allow the channel request, or one of the following error
     |      codes to reject it:
     |      
     |          - ``OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED``
     |          - ``OPEN_FAILED_CONNECT_FAILED``
     |          - ``OPEN_FAILED_UNKNOWN_CHANNEL_TYPE``
     |          - ``OPEN_FAILED_RESOURCE_SHORTAGE``
     |      
     |      The default implementation always returns
     |      ``OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED``.
     |      
     |      :param int chanid: ID of the channel
     |      :param tuple origin:
     |          2-tuple containing the IP address and port of the originator
     |          (client side)
     |      :param tuple destination:
     |          2-tuple containing the IP address and port of the destination
     |          (server side)
     |      :return: an `int` success or failure code (listed above)
     |  
     |  cchheecckk__cchhaannnneell__eennvv__rreeqquueesstt(self, channel, name, value)
     |      Check whether a given environment variable can be specified for the
     |      given channel.  This method should return ``True`` if the server
     |      is willing to set the specified environment variable.  Note that
     |      some environment variables (e.g., PATH) can be exceedingly
     |      dangerous, so blindly allowing the client to set the environment
     |      is almost certainly not a good idea.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param channel: the `.Channel` the env request arrived on
     |      :param str name: name
     |      :param str value: Channel value
     |      :returns: A boolean
     |  
     |  cchheecckk__cchhaannnneell__eexxeecc__rreeqquueesstt(self, channel, command)
     |      Determine if a shell command will be executed for the client.  If this
     |      method returns ``True``, the channel should be connected to the stdin,
     |      stdout, and stderr of the shell command.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the request arrived on.
     |      :param str command: the command to execute.
     |      :return:
     |          ``True`` if this channel is now hooked up to the stdin, stdout, and
     |          stderr of the executing command; ``False`` if the command will not
     |          be executed.
     |      
     |      .. versionadded:: 1.1
     |  
     |  cchheecckk__cchhaannnneell__ffoorrwwaarrdd__aaggeenntt__rreeqquueesstt(self, channel)
     |      Determine if the client will be provided with an forward agent session.
     |      If this method returns ``True``, the server will allow SSH Agent
     |      forwarding.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the request arrived on
     |      :return: ``True`` if the AgentForward was loaded; ``False`` if not
     |  
     |  cchheecckk__cchhaannnneell__ppttyy__rreeqquueesstt(self, channel, term, width, height, pixelwidth, pixelheight, modes)
     |      Determine if a pseudo-terminal of the given dimensions (usually
     |      requested for shell access) can be provided on the given channel.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the pty request arrived on.
     |      :param str term: type of terminal requested (for example, ``"vt100"``).
     |      :param int width: width of screen in characters.
     |      :param int height: height of screen in characters.
     |      :param int pixelwidth:
     |          width of screen in pixels, if known (may be ``0`` if unknown).
     |      :param int pixelheight:
     |          height of screen in pixels, if known (may be ``0`` if unknown).
     |      :return:
     |          ``True`` if the psuedo-terminal has been allocated; ``False``
     |          otherwise.
     |  
     |  cchheecckk__cchhaannnneell__rreeqquueesstt(self, kind, chanid)
     |      Determine if a channel request of a given type will be granted, and
     |      return ``OPEN_SUCCEEDED`` or an error code.  This method is
     |      called in server mode when the client requests a channel, after
     |      authentication is complete.
     |      
     |      If you allow channel requests (and an ssh server that didn't would be
     |      useless), you should also override some of the channel request methods
     |      below, which are used to determine which services will be allowed on
     |      a given channel:
     |      
     |          - `check_channel_pty_request`
     |          - `check_channel_shell_request`
     |          - `check_channel_subsystem_request`
     |          - `check_channel_window_change_request`
     |          - `check_channel_x11_request`
     |          - `check_channel_forward_agent_request`
     |      
     |      The ``chanid`` parameter is a small number that uniquely identifies the
     |      channel within a `.Transport`.  A `.Channel` object is not created
     |      unless this method returns ``OPEN_SUCCEEDED`` -- once a
     |      `.Channel` object is created, you can call `.Channel.get_id` to
     |      retrieve the channel ID.
     |      
     |      The return value should either be ``OPEN_SUCCEEDED`` (or
     |      ``0``) to allow the channel request, or one of the following error
     |      codes to reject it:
     |      
     |          - ``OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED``
     |          - ``OPEN_FAILED_CONNECT_FAILED``
     |          - ``OPEN_FAILED_UNKNOWN_CHANNEL_TYPE``
     |          - ``OPEN_FAILED_RESOURCE_SHORTAGE``
     |      
     |      The default implementation always returns
     |      ``OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED``.
     |      
     |      :param str kind:
     |          the kind of channel the client would like to open (usually
     |          ``"session"``).
     |      :param int chanid: ID of the channel
     |      :return: an `int` success or failure code (listed above)
     |  
     |  cchheecckk__cchhaannnneell__sshheellll__rreeqquueesstt(self, channel)
     |      Determine if a shell will be provided to the client on the given
     |      channel.  If this method returns ``True``, the channel should be
     |      connected to the stdin/stdout of a shell (or something that acts like
     |      a shell).
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the request arrived on.
     |      :return:
     |          ``True`` if this channel is now hooked up to a shell; ``False`` if
     |          a shell can't or won't be provided.
     |  
     |  cchheecckk__cchhaannnneell__ssuubbssyysstteemm__rreeqquueesstt(self, channel, name)
     |      Determine if a requested subsystem will be provided to the client on
     |      the given channel.  If this method returns ``True``, all future I/O
     |      through this channel will be assumed to be connected to the requested
     |      subsystem.  An example of a subsystem is ``sftp``.
     |      
     |      The default implementation checks for a subsystem handler assigned via
     |      `.Transport.set_subsystem_handler`.
     |      If one has been set, the handler is invoked and this method returns
     |      ``True``.  Otherwise it returns ``False``.
     |      
     |      .. note:: Because the default implementation uses the `.Transport` to
     |          identify valid subsystems, you probably won't need to override this
     |          method.
     |      
     |      :param .Channel channel: the `.Channel` the pty request arrived on.
     |      :param str name: name of the requested subsystem.
     |      :return:
     |          ``True`` if this channel is now hooked up to the requested
     |          subsystem; ``False`` if that subsystem can't or won't be provided.
     |  
     |  cchheecckk__cchhaannnneell__wwiinnddooww__cchhaannggee__rreeqquueesstt(self, channel, width, height, pixelwidth, pixelheight)
     |      Determine if the pseudo-terminal on the given channel can be resized.
     |      This only makes sense if a pty was previously allocated on it.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the pty request arrived on.
     |      :param int width: width of screen in characters.
     |      :param int height: height of screen in characters.
     |      :param int pixelwidth:
     |          width of screen in pixels, if known (may be ``0`` if unknown).
     |      :param int pixelheight:
     |          height of screen in pixels, if known (may be ``0`` if unknown).
     |      :return: ``True`` if the terminal was resized; ``False`` if not.
     |  
     |  cchheecckk__cchhaannnneell__xx1111__rreeqquueesstt(self, channel, single_connection, auth_protocol, auth_cookie, screen_number)
     |      Determine if the client will be provided with an X11 session.  If this
     |      method returns ``True``, X11 applications should be routed through new
     |      SSH channels, using `.Transport.open_x11_channel`.
     |      
     |      The default implementation always returns ``False``.
     |      
     |      :param .Channel channel: the `.Channel` the X11 request arrived on
     |      :param bool single_connection:
     |          ``True`` if only a single X11 channel should be opened, else
     |          ``False``.
     |      :param str auth_protocol: the protocol used for X11 authentication
     |      :param str auth_cookie: the cookie used to authenticate to X11
     |      :param int screen_number: the number of the X11 screen to connect to
     |      :return: ``True`` if the X11 session was opened; ``False`` if not
     |  
     |  cchheecckk__gglloobbaall__rreeqquueesstt(self, kind, msg)
     |      Handle a global request of the given ``kind``.  This method is called
     |      in server mode and client mode, whenever the remote host makes a global
     |      request.  If there are any arguments to the request, they will be in
     |      ``msg``.
     |      
     |      There aren't any useful global requests defined, aside from port
     |      forwarding, so usually this type of request is an extension to the
     |      protocol.
     |      
     |      If the request was successful and you would like to return contextual
     |      data to the remote host, return a tuple.  Items in the tuple will be
     |      sent back with the successful result.  (Note that the items in the
     |      tuple can only be strings, ints, longs, or bools.)
     |      
     |      The default implementation always returns ``False``, indicating that it
     |      does not support any global requests.
     |      
     |      .. note:: Port forwarding requests are handled separately, in
     |          `check_port_forward_request`.
     |      
     |      :param str kind: the kind of global request being made.
     |      :param .Message msg: any extra arguments to the request.
     |      :return:
     |          ``True`` or a `tuple` of data if the request was granted; ``False``
     |          otherwise.
     |  
     |  cchheecckk__ppoorrtt__ffoorrwwaarrdd__rreeqquueesstt(self, address, port)
     |      Handle a request for port forwarding.  The client is asking that
     |      connections to the given address and port be forwarded back across
     |      this ssh connection.  An address of ``"0.0.0.0"`` indicates a global
     |      address (any address associated with this server) and a port of ``0``
     |      indicates that no specific port is requested (usually the OS will pick
     |      a port).
     |      
     |      The default implementation always returns ``False``, rejecting the
     |      port forwarding request.  If the request is accepted, you should return
     |      the port opened for listening.
     |      
     |      :param str address: the requested address
     |      :param int port: the requested port
     |      :return:
     |          the port number (`int`) that was opened for listening, or ``False``
     |          to reject
     |  
     |  eennaabbllee__aauutthh__ggssssaappii(self)
     |      Overwrite this function in your SSH server to enable GSSAPI
     |      authentication.
     |      The default implementation always returns false.
     |      
     |      :return: True if GSSAPI authentication is enabled otherwise false
     |      :rtype:  Boolean
     |      :see: : `.ssh_gss`
     |  
     |  ggeett__aalllloowweedd__aauutthhss(self, username)
     |      Return a list of authentication methods supported by the server.
     |      This list is sent to clients attempting to authenticate, to inform them
     |      of authentication methods that might be successful.
     |      
     |      The "list" is actually a string of comma-separated names of types of
     |      authentication.  Possible values are ``"password"``, ``"publickey"``,
     |      and ``"none"``.
     |      
     |      The default implementation always returns ``"password"``.
     |      
     |      :param str username: the username requesting authentication.
     |      :return: a comma-separated `str` of authentication types
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class SSuubbssyysstteemmHHaannddlleerr(threading.Thread)
     |  Handler for a subsytem in server mode.  If you create a subclass of this
     |  class and pass it to `.Transport.set_subsystem_handler`, an object of this
     |  class will be created for each request for this subsystem.  Each new object
     |  will be executed within its own new thread by calling `start_subsystem`.
     |  When that method completes, the channel is closed.
     |  
     |  For example, if you made a subclass ``MP3Handler`` and registered it as the
     |  handler for subsystem ``"mp3"``, then whenever a client has successfully
     |  authenticated and requests subsytem ``"mp3"``, an object of class
     |  ``MP3Handler`` will be created, and `start_subsystem` will be called on
     |  it from a new thread.
     |  
     |  Method resolution order:
     |      SubsystemHandler
     |      threading.Thread
     |      threading._Verbose
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, channel, name, server)
     |      Create a new handler for a channel.  This is used by `.ServerInterface`
     |      to start up a new handler when a channel requests this subsystem.  You
     |      don't need to override this method, but if you do, be sure to pass the
     |      ``channel`` and ``name`` parameters through to the original ``__init__``
     |      method here.
     |      
     |      :param .Channel channel: the channel associated with this subsystem request.
     |      :param str name: name of the requested subsystem.
     |      :param .ServerInterface server:
     |          the server object for the session that started this subsystem
     |  
     |  ffiinniisshh__ssuubbssyysstteemm(self)
     |      Perform any cleanup at the end of a subsystem.  The default
     |      implementation just closes the channel.
     |      
     |      .. versionadded:: 1.1
     |  
     |  ggeett__sseerrvveerr(self)
     |      Return the `.ServerInterface` object associated with this channel and
     |      subsystem.
     |  
     |  ssttaarrtt__ssuubbssyysstteemm(self, name, transport, channel)
     |      Process an ssh subsystem in server mode.  This method is called on a
     |      new object (and in a new thread) for each subsystem request.  It is
     |      assumed that all subsystem logic will take place here, and when the
     |      subsystem is finished, this method will return.  After this method
     |      returns, the channel is closed.
     |      
     |      The combination of ``transport`` and ``channel`` are unique; this handler
     |      corresponds to exactly one `.Channel` on one `.Transport`.
     |      
     |      .. note::
     |          It is the responsibility of this method to exit if the underlying
     |          `.Transport` is closed.  This can be done by checking
     |          `.Transport.is_active` or noticing an EOF on the `.Channel`.  If
     |          this method loops forever without checking for this case, your
     |          Python interpreter may refuse to exit because this thread will
     |          still be running.
     |      
     |      :param str name: name of the requested subsystem.
     |      :param .Transport transport: the server-mode `.Transport`.
     |      :param .Channel channel: the channel associated with this subsystem request.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  ____rreepprr____(self)
     |  
     |  ggeettNNaammee(self)
     |  
     |  iissAAlliivvee(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  iissDDaaeemmoonn(self)
     |  
     |  iiss__aalliivvee = isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  jjooiinn(self, timeout=None)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  rruunn(self)
     |      Method representing the thread's activity.
     |      
     |      You may override this method in a subclass. The standard run() method
     |      invokes the callable object passed to the object's constructor as the
     |      target argument, if any, with sequential and keyword arguments taken
     |      from the args and kwargs arguments, respectively.
     |  
     |  sseettDDaaeemmoonn(self, daemonic)
     |  
     |  sseettNNaammee(self, name)
     |  
     |  ssttaarrtt(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  ddaaeemmoonn
     |      A boolean value indicating whether this thread is a daemon thread (True) or not (False).
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  iiddeenntt
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the thread.get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  nnaammee
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading._Verbose:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
    
    class TTrraannssppoorrtt(threading.Thread, paramiko.util.ClosingContextManager)
     |  An SSH Transport attaches to a stream (usually a socket), negotiates an
     |  encrypted session, authenticates, and then creates stream tunnels, called
     |  `channels <.Channel>`, across the session.  Multiple channels can be
     |  multiplexed across a single session (and often are, in the case of port
     |  forwardings).
     |  
     |  Instances of this class may be used as context managers.
     |  
     |  Method resolution order:
     |      Transport
     |      threading.Thread
     |      threading._Verbose
     |      paramiko.util.ClosingContextManager
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, sock, default_window_size=2097152, default_max_packet_size=32768, gss_kex=False, gss_deleg_creds=True)
     |      Create a new SSH session over an existing socket, or socket-like
     |      object.  This only creates the `.Transport` object; it doesn't begin the
     |      SSH session yet.  Use `connect` or `start_client` to begin a client
     |      session, or `start_server` to begin a server session.
     |      
     |      If the object is not actually a socket, it must have the following
     |      methods:
     |      
     |      - ``send(str)``: Writes from 1 to ``len(str)`` bytes, and returns an
     |        int representing the number of bytes written.  Returns
     |        0 or raises ``EOFError`` if the stream has been closed.
     |      - ``recv(int)``: Reads from 1 to ``int`` bytes and returns them as a
     |        string.  Returns 0 or raises ``EOFError`` if the stream has been
     |        closed.
     |      - ``close()``: Closes the socket.
     |      - ``settimeout(n)``: Sets a (float) timeout on I/O operations.
     |      
     |      For ease of use, you may also pass in an address (as a tuple) or a host
     |      string as the ``sock`` argument.  (A host string is a hostname with an
     |      optional port (separated by ``":"``) which will be converted into a
     |      tuple of ``(hostname, port)``.)  A socket will be connected to this
     |      address and used for communication.  Exceptions from the ``socket``
     |      call may be thrown in this case.
     |      
     |      .. note::
     |          Modifying the the window and packet sizes might have adverse
     |          effects on your channels created from this transport. The default
     |          values are the same as in the OpenSSH code base and have been
     |          battle tested.
     |      
     |      :param socket sock:
     |          a socket or socket-like object to create the session over.
     |      :param int default_window_size:
     |          sets the default window size on the transport. (defaults to
     |          2097152)
     |      :param int default_max_packet_size:
     |          sets the default max packet size on the transport. (defaults to
     |          32768)
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``default_window_size`` and ``default_max_packet_size``
     |          arguments.
     |  
     |  ____rreepprr____(self)
     |      Returns a string representation of this object, for debugging.
     |  
     |  aacccceepptt(self, timeout=None)
     |      Return the next channel opened by the client over this transport, in
     |      server mode.  If no channel is opened before the given timeout, ``None``
     |      is returned.
     |      
     |      :param int timeout:
     |          seconds to wait for a channel, or ``None`` to wait forever
     |      :return: a new `.Channel` opened by the client
     |  
     |  aadddd__sseerrvveerr__kkeeyy(self, key)
     |      Add a host key to the list of keys used for server mode.  When behaving
     |      as a server, the host key is used to sign certain packets during the
     |      SSH2 negotiation, so that the client can trust that we are who we say
     |      we are.  Because this is used for signing, the key must contain private
     |      key info, not just the public half.  Only one key of each type (RSA or
     |      DSS) is kept.
     |      
     |      :param .PKey key:
     |          the host key to add, usually an `.RSAKey` or `.DSSKey`.
     |  
     |  aattffoorrkk(self)
     |      Terminate this Transport without closing the session.  On posix
     |      systems, if a Transport is open during process forking, both parent
     |      and child will share the underlying socket, but only one process can
     |      use the connection (without corrupting the session).  Use this method
     |      to clean up a Transport object without disrupting the other process.
     |      
     |      .. versionadded:: 1.5.3
     |  
     |  aauutthh__ggssssaappii__kkeeyyeexx(self, username)
     |      Authenticate to the Server with GSS-API / SSPI if GSS-API Key Exchange
     |      was the used key exchange method.
     |      
     |      :param str username: The username to authenticate as
     |      :param str gss_host: The target host
     |      :param bool gss_deleg_creds: Delegate credentials or not
     |      :return: list of auth types permissible for the next stage of
     |               authentication (normally empty)
     |      :rtype: list
     |      :raise BadAuthenticationType: if GSS-API Key Exchange was not performed
     |                                    (and no event was passed in)
     |      :raise AuthenticationException: if the authentication failed (and no
     |          event was passed in)
     |      :raise SSHException: if there was a network error
     |  
     |  aauutthh__ggssssaappii__wwiitthh__mmiicc(self, username, gss_host, gss_deleg_creds)
     |      Authenticate to the Server using GSS-API / SSPI.
     |      
     |      :param str username: The username to authenticate as
     |      :param str gss_host: The target host
     |      :param bool gss_deleg_creds: Delegate credentials or not
     |      :return: list of auth types permissible for the next stage of
     |               authentication (normally empty)
     |      :rtype: list
     |      :raise BadAuthenticationType: if gssapi-with-mic isn't
     |          allowed by the server (and no event was passed in)
     |      :raise AuthenticationException: if the authentication failed (and no
     |          event was passed in)
     |      :raise SSHException: if there was a network error
     |  
     |  aauutthh__iinntteerraaccttiivvee(self, username, handler, submethods='')
     |      Authenticate to the server interactively.  A handler is used to answer
     |      arbitrary questions from the server.  On many servers, this is just a
     |      dumb wrapper around PAM.
     |      
     |      This method will block until the authentication succeeds or fails,
     |      peroidically calling the handler asynchronously to get answers to
     |      authentication questions.  The handler may be called more than once
     |      if the server continues to ask questions.
     |      
     |      The handler is expected to be a callable that will handle calls of the
     |      form: ``handler(title, instructions, prompt_list)``.  The ``title`` is
     |      meant to be a dialog-window title, and the ``instructions`` are user
     |      instructions (both are strings).  ``prompt_list`` will be a list of
     |      prompts, each prompt being a tuple of ``(str, bool)``.  The string is
     |      the prompt and the boolean indicates whether the user text should be
     |      echoed.
     |      
     |      A sample call would thus be:
     |      ``handler('title', 'instructions', [('Password:', False)])``.
     |      
     |      The handler should return a list or tuple of answers to the server's
     |      questions.
     |      
     |      If the server requires multi-step authentication (which is very rare),
     |      this method will return a list of auth types permissible for the next
     |      step.  Otherwise, in the normal case, an empty list is returned.
     |      
     |      :param str username: the username to authenticate as
     |      :param callable handler: a handler for responding to server questions
     |      :param str submethods: a string list of desired submethods (optional)
     |      :return:
     |          `list` of auth types permissible for the next stage of
     |          authentication (normally empty).
     |      
     |      :raises BadAuthenticationType: if public-key authentication isn't
     |          allowed by the server for this user
     |      :raises AuthenticationException: if the authentication failed
     |      :raises SSHException: if there was a network error
     |      
     |      .. versionadded:: 1.5
     |  
     |  aauutthh__iinntteerraaccttiivvee__dduummbb(self, username, handler=None, submethods='')
     |      Autenticate to the server interactively but dumber.
     |      Just print the prompt and / or instructions to stdout and send back
     |      the response. This is good for situations where partial auth is
     |      achieved by key and then the user has to enter a 2fac token.
     |  
     |  aauutthh__nnoonnee(self, username)
     |      Try to authenticate to the server using no authentication at all.
     |      This will almost always fail.  It may be useful for determining the
     |      list of authentication types supported by the server, by catching the
     |      `.BadAuthenticationType` exception raised.
     |      
     |      :param str username: the username to authenticate as
     |      :return:
     |          `list` of auth types permissible for the next stage of
     |          authentication (normally empty)
     |      
     |      :raises BadAuthenticationType: if "none" authentication isn't allowed
     |          by the server for this user
     |      :raises SSHException: if the authentication failed due to a network
     |          error
     |      
     |      .. versionadded:: 1.5
     |  
     |  aauutthh__ppaasssswwoorrdd(self, username, password, event=None, fallback=True)
     |      Authenticate to the server using a password.  The username and password
     |      are sent over an encrypted link.
     |      
     |      If an ``event`` is passed in, this method will return immediately, and
     |      the event will be triggered once authentication succeeds or fails.  On
     |      success, `is_authenticated` will return ``True``.  On failure, you may
     |      use `get_exception` to get more detailed error information.
     |      
     |      Since 1.1, if no event is passed, this method will block until the
     |      authentication succeeds or fails.  On failure, an exception is raised.
     |      Otherwise, the method simply returns.
     |      
     |      Since 1.5, if no event is passed and ``fallback`` is ``True`` (the
     |      default), if the server doesn't support plain password authentication
     |      but does support so-called "keyboard-interactive" mode, an attempt
     |      will be made to authenticate using this interactive mode.  If it fails,
     |      the normal exception will be thrown as if the attempt had never been
     |      made.  This is useful for some recent Gentoo and Debian distributions,
     |      which turn off plain password authentication in a misguided belief
     |      that interactive authentication is "more secure".  (It's not.)
     |      
     |      If the server requires multi-step authentication (which is very rare),
     |      this method will return a list of auth types permissible for the next
     |      step.  Otherwise, in the normal case, an empty list is returned.
     |      
     |      :param str username: the username to authenticate as
     |      :param basestring password: the password to authenticate with
     |      :param .threading.Event event:
     |          an event to trigger when the authentication attempt is complete
     |          (whether it was successful or not)
     |      :param bool fallback:
     |          ``True`` if an attempt at an automated "interactive" password auth
     |          should be made if the server doesn't support normal password auth
     |      :return:
     |          `list` of auth types permissible for the next stage of
     |          authentication (normally empty)
     |      
     |      :raises BadAuthenticationType: if password authentication isn't
     |          allowed by the server for this user (and no event was passed in)
     |      :raises AuthenticationException: if the authentication failed (and no
     |          event was passed in)
     |      :raises SSHException: if there was a network error
     |  
     |  aauutthh__ppuubblliicckkeeyy(self, username, key, event=None)
     |      Authenticate to the server using a private key.  The key is used to
     |      sign data from the server, so it must include the private part.
     |      
     |      If an ``event`` is passed in, this method will return immediately, and
     |      the event will be triggered once authentication succeeds or fails.  On
     |      success, `is_authenticated` will return ``True``.  On failure, you may
     |      use `get_exception` to get more detailed error information.
     |      
     |      Since 1.1, if no event is passed, this method will block until the
     |      authentication succeeds or fails.  On failure, an exception is raised.
     |      Otherwise, the method simply returns.
     |      
     |      If the server requires multi-step authentication (which is very rare),
     |      this method will return a list of auth types permissible for the next
     |      step.  Otherwise, in the normal case, an empty list is returned.
     |      
     |      :param str username: the username to authenticate as
     |      :param .PKey key: the private key to authenticate with
     |      :param .threading.Event event:
     |          an event to trigger when the authentication attempt is complete
     |          (whether it was successful or not)
     |      :return:
     |          `list` of auth types permissible for the next stage of
     |          authentication (normally empty)
     |      
     |      :raises BadAuthenticationType: if public-key authentication isn't
     |          allowed by the server for this user (and no event was passed in)
     |      :raises AuthenticationException: if the authentication failed (and no
     |          event was passed in)
     |      :raises SSHException: if there was a network error
     |  
     |  ccaanncceell__ppoorrtt__ffoorrwwaarrdd(self, address, port)
     |      Ask the server to cancel a previous port-forwarding request.  No more
     |      connections to the given address & port will be forwarded across this
     |      ssh connection.
     |      
     |      :param str address: the address to stop forwarding
     |      :param int port: the port to stop forwarding
     |  
     |  cclloossee(self)
     |      Close this session, and any open channels that are tied to it.
     |  
     |  ccoonnnneecctt(self, hostkey=None, username='', password=None, pkey=None, gss_host=None, gss_auth=False, gss_kex=False, gss_deleg_creds=True)
     |      Negotiate an SSH2 session, and optionally verify the server's host key
     |      and authenticate using a password or private key.  This is a shortcut
     |      for `start_client`, `get_remote_server_key`, and
     |      `Transport.auth_password` or `Transport.auth_publickey`.  Use those
     |      methods if you want more control.
     |      
     |      You can use this method immediately after creating a Transport to
     |      negotiate encryption with a server.  If it fails, an exception will be
     |      thrown.  On success, the method will return cleanly, and an encrypted
     |      session exists.  You may immediately call `open_channel` or
     |      `open_session` to get a `.Channel` object, which is used for data
     |      transfer.
     |      
     |      .. note::
     |          If you fail to supply a password or private key, this method may
     |          succeed, but a subsequent `open_channel` or `open_session` call may
     |          fail because you haven't authenticated yet.
     |      
     |      :param .PKey hostkey:
     |          the host key expected from the server, or ``None`` if you don't
     |          want to do host key verification.
     |      :param str username: the username to authenticate as.
     |      :param str password:
     |          a password to use for authentication, if you want to use password
     |          authentication; otherwise ``None``.
     |      :param .PKey pkey:
     |          a private key to use for authentication, if you want to use private
     |          key authentication; otherwise ``None``.
     |      :param str gss_host:
     |          The target's name in the kerberos database. Default: hostname
     |      :param bool gss_auth:
     |          ``True`` if you want to use GSS-API authentication.
     |      :param bool gss_kex:
     |          Perform GSS-API Key Exchange and user authentication.
     |      :param bool gss_deleg_creds:
     |          Whether to delegate GSS-API client credentials.
     |      
     |      :raises SSHException: if the SSH2 negotiation fails, the host key
     |          supplied by the server is incorrect, or authentication fails.
     |  
     |  ggeett__bbaannnneerr(self)
     |      Return the banner supplied by the server upon connect. If no banner is
     |      supplied, this method returns ``None``.
     |      
     |      :returns: server supplied banner (`str`), or ``None``.
     |      
     |      .. versionadded:: 1.13
     |  
     |  ggeett__eexxcceeppttiioonn(self)
     |      Return any exception that happened during the last server request.
     |      This can be used to fetch more specific error information after using
     |      calls like `start_client`.  The exception (if any) is cleared after
     |      this call.
     |      
     |      :return:
     |          an exception, or ``None`` if there is no stored exception.
     |      
     |      .. versionadded:: 1.1
     |  
     |  ggeett__hheexxdduummpp(self)
     |      Return ``True`` if the transport is currently logging hex dumps of
     |      protocol traffic.
     |      
     |      :return: ``True`` if hex dumps are being logged, else ``False``.
     |      
     |      .. versionadded:: 1.4
     |  
     |  ggeett__lloogg__cchhaannnneell(self)
     |      Return the channel name used for this transport's logging.
     |      
     |      :return: channel name as a `str`
     |      
     |      .. versionadded:: 1.2
     |  
     |  ggeett__rreemmoottee__sseerrvveerr__kkeeyy(self)
     |      Return the host key of the server (in client mode).
     |      
     |      .. note::
     |          Previously this call returned a tuple of ``(key type, key
     |          string)``. You can get the same effect by calling `.PKey.get_name`
     |          for the key type, and ``str(key)`` for the key string.
     |      
     |      :raises SSHException: if no session is currently active.
     |      
     |      :return: public key (`.PKey`) of the remote server
     |  
     |  ggeett__sseeccuurriittyy__ooppttiioonnss(self)
     |      Return a `.SecurityOptions` object which can be used to tweak the
     |      encryption algorithms this transport will permit (for encryption,
     |      digest/hash operations, public keys, and key exchanges) and the order
     |      of preference for them.
     |  
     |  ggeett__sseerrvveerr__kkeeyy(self)
     |      Return the active host key, in server mode.  After negotiating with the
     |      client, this method will return the negotiated host key.  If only one
     |      type of host key was set with `add_server_key`, that's the only key
     |      that will ever be returned.  But in cases where you have set more than
     |      one type of host key (for example, an RSA key and a DSS key), the key
     |      type will be negotiated by the client, and this method will return the
     |      key of the type agreed on.  If the host key has not been negotiated
     |      yet, ``None`` is returned.  In client mode, the behavior is undefined.
     |      
     |      :return:
     |          host key (`.PKey`) of the type negotiated by the client, or
     |          ``None``.
     |  
     |  ggeett__uusseerrnnaammee(self)
     |      Return the username this connection is authenticated for.  If the
     |      session is not authenticated (or authentication failed), this method
     |      returns ``None``.
     |      
     |      :return: username that was authenticated (a `str`), or ``None``.
     |  
     |  ggeettppeeeerrnnaammee(self)
     |      Return the address of the remote side of this Transport, if possible.
     |      This is effectively a wrapper around ``'getpeername'`` on the underlying
     |      socket.  If the socket-like object has no ``'getpeername'`` method,
     |      then ``("unknown", 0)`` is returned.
     |      
     |      :return:
     |          the address of the remote host, if known, as a ``(str, int)``
     |          tuple.
     |  
     |  gglloobbaall__rreeqquueesstt(self, kind, data=None, wait=True)
     |      Make a global request to the remote host.  These are normally
     |      extensions to the SSH2 protocol.
     |      
     |      :param str kind: name of the request.
     |      :param tuple data:
     |          an optional tuple containing additional data to attach to the
     |          request.
     |      :param bool wait:
     |          ``True`` if this method should not return until a response is
     |          received; ``False`` otherwise.
     |      :return:
     |          a `.Message` containing possible additional data if the request was
     |          successful (or an empty `.Message` if ``wait`` was ``False``);
     |          ``None`` if the request was denied.
     |  
     |  iiss__aaccttiivvee(self)
     |      Return true if this session is active (open).
     |      
     |      :return:
     |          True if the session is still active (open); False if the session is
     |          closed
     |  
     |  iiss__aauutthheennttiiccaatteedd(self)
     |      Return true if this session is active and authenticated.
     |      
     |      :return:
     |          True if the session is still open and has been authenticated
     |          successfully; False if authentication failed and/or the session is
     |          closed.
     |  
     |  ooppeenn__cchhaannnneell(self, kind, dest_addr=None, src_addr=None, window_size=None, max_packet_size=None, timeout=None)
     |      Request a new channel to the server. `Channels <.Channel>` are
     |      socket-like objects used for the actual transfer of data across the
     |      session. You may only request a channel after negotiating encryption
     |      (using `connect` or `start_client`) and authenticating.
     |      
     |      .. note:: Modifying the the window and packet sizes might have adverse
     |          effects on the channel created. The default values are the same
     |          as in the OpenSSH code base and have been battle tested.
     |      
     |      :param str kind:
     |          the kind of channel requested (usually ``"session"``,
     |          ``"forwarded-tcpip"``, ``"direct-tcpip"``, or ``"x11"``)
     |      :param tuple dest_addr:
     |          the destination address (address + port tuple) of this port
     |          forwarding, if ``kind`` is ``"forwarded-tcpip"`` or
     |          ``"direct-tcpip"`` (ignored for other channel types)
     |      :param src_addr: the source address of this port forwarding, if
     |          ``kind`` is ``"forwarded-tcpip"``, ``"direct-tcpip"``, or ``"x11"``
     |      :param int window_size:
     |          optional window size for this session.
     |      :param int max_packet_size:
     |          optional max packet size for this session.
     |      :param float timeout:
     |          optional timeout opening a channel, default 3600s (1h)
     |      
     |      :return: a new `.Channel` on success
     |      
     |      :raises SSHException: if the request is rejected, the session ends
     |          prematurely or there is a timeout openning a channel
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``window_size`` and ``max_packet_size`` arguments.
     |  
     |  ooppeenn__ffoorrwwaarrdd__aaggeenntt__cchhaannnneell(self)
     |      Request a new channel to the client, of type
     |      ``"auth-agent@openssh.com"``.
     |      
     |      This is just an alias for ``open_channel('auth-agent@openssh.com')``.
     |      
     |      :return: a new `.Channel`
     |      
     |      :raises SSHException:
     |          if the request is rejected or the session ends prematurely
     |  
     |  ooppeenn__ffoorrwwaarrddeedd__ttccppiipp__cchhaannnneell(self, src_addr, dest_addr)
     |      Request a new channel back to the client, of type ``"forwarded-tcpip"``.
     |      This is used after a client has requested port forwarding, for sending
     |      incoming connections back to the client.
     |      
     |      :param src_addr: originator's address
     |      :param dest_addr: local (server) connected address
     |  
     |  ooppeenn__sseessssiioonn(self, window_size=None, max_packet_size=None, timeout=None)
     |      Request a new channel to the server, of type ``"session"``.  This is
     |      just an alias for calling `open_channel` with an argument of
     |      ``"session"``.
     |      
     |      .. note:: Modifying the the window and packet sizes might have adverse
     |          effects on the session created. The default values are the same
     |          as in the OpenSSH code base and have been battle tested.
     |      
     |      :param int window_size:
     |          optional window size for this session.
     |      :param int max_packet_size:
     |          optional max packet size for this session.
     |      
     |      :return: a new `.Channel`
     |      
     |      :raises SSHException: if the request is rejected or the session ends
     |          prematurely
     |      
     |      .. versionchanged:: 1.15
     |          Added the ``window_size`` and ``max_packet_size`` arguments.
     |  
     |  ooppeenn__ssffttpp__cclliieenntt(self)
     |      Create an SFTP client channel from an open transport.  On success, an
     |      SFTP session will be opened with the remote host, and a new
     |      `.SFTPClient` object will be returned.
     |      
     |      :return:
     |          a new `.SFTPClient` referring to an sftp session (channel) across
     |          this transport
     |  
     |  ooppeenn__xx1111__cchhaannnneell(self, src_addr=None)
     |      Request a new channel to the client, of type ``"x11"``.  This
     |      is just an alias for ``open_channel('x11', src_addr=src_addr)``.
     |      
     |      :param tuple src_addr:
     |          the source address (``(str, int)``) of the x11 server (port is the
     |          x11 port, ie. 6010)
     |      :return: a new `.Channel`
     |      
     |      :raises SSHException: if the request is rejected or the session ends
     |          prematurely
     |  
     |  rreenneeggoottiiaattee__kkeeyyss(self)
     |      Force this session to switch to new keys.  Normally this is done
     |      automatically after the session hits a certain number of packets or
     |      bytes sent or received, but this method gives you the option of forcing
     |      new keys whenever you want.  Negotiating new keys causes a pause in
     |      traffic both ways as the two sides swap keys and do computations.  This
     |      method returns when the session has switched to new keys.
     |      
     |      :raises SSHException: if the key renegotiation failed (which causes the
     |          session to end)
     |  
     |  rreeqquueesstt__ppoorrtt__ffoorrwwaarrdd(self, address, port, handler=None)
     |      Ask the server to forward TCP connections from a listening port on
     |      the server, across this SSH session.
     |      
     |      If a handler is given, that handler is called from a different thread
     |      whenever a forwarded connection arrives.  The handler parameters are::
     |      
     |          handler(channel, (origin_addr, origin_port), (server_addr, server_port))
     |      
     |      where ``server_addr`` and ``server_port`` are the address and port that
     |      the server was listening on.
     |      
     |      If no handler is set, the default behavior is to send new incoming
     |      forwarded connections into the accept queue, to be picked up via
     |      `accept`.
     |      
     |      :param str address: the address to bind when forwarding
     |      :param int port:
     |          the port to forward, or 0 to ask the server to allocate any port
     |      :param callable handler:
     |          optional handler for incoming forwarded connections, of the form
     |          ``func(Channel, (str, int), (str, int))``.
     |      
     |      :return: the port number (`int`) allocated by the server
     |      
     |      :raises SSHException: if the server refused the TCP forward request
     |  
     |  rruunn(self)
     |  
     |  sseenndd__iiggnnoorree(self, byte_count=None)
     |      Send a junk packet across the encrypted link.  This is sometimes used
     |      to add "noise" to a connection to confuse would-be attackers.  It can
     |      also be used as a keep-alive for long lived connections traversing
     |      firewalls.
     |      
     |      :param int byte_count:
     |          the number of random bytes to send in the payload of the ignored
     |          packet -- defaults to a random number from 10 to 41.
     |  
     |  sseett__ggssss__hhoosstt(self, gss_host)
     |      Setter for C{gss_host} if GSS-API Key Exchange is performed.
     |      
     |      :param str gss_host: The targets name in the kerberos database
     |                           Default: The name of the host to connect to
     |      :rtype: Void
     |  
     |  sseett__hheexxdduummpp(self, hexdump)
     |      Turn on/off logging a hex dump of protocol traffic at DEBUG level in
     |      the logs.  Normally you would want this off (which is the default),
     |      but if you are debugging something, it may be useful.
     |      
     |      :param bool hexdump:
     |          ``True`` to log protocol traffix (in hex) to the log; ``False``
     |          otherwise.
     |  
     |  sseett__kkeeeeppaalliivvee(self, interval)
     |      Turn on/off keepalive packets (default is off).  If this is set, after
     |      ``interval`` seconds without sending any data over the connection, a
     |      "keepalive" packet will be sent (and ignored by the remote host).  This
     |      can be useful to keep connections alive over a NAT, for example.
     |      
     |      :param int interval:
     |          seconds to wait before sending a keepalive packet (or
     |          0 to disable keepalives).
     |  
     |  sseett__lloogg__cchhaannnneell(self, name)
     |      Set the channel for this transport's logging.  The default is
     |      ``"paramiko.transport"`` but it can be set to anything you want. (See
     |      the `.logging` module for more info.)  SSH Channels will log to a
     |      sub-channel of the one specified.
     |      
     |      :param str name: new channel name for logging
     |      
     |      .. versionadded:: 1.1
     |  
     |  sseett__ssuubbssyysstteemm__hhaannddlleerr(self, name, handler, *larg, **kwarg)
     |      Set the handler class for a subsystem in server mode.  If a request
     |      for this subsystem is made on an open ssh channel later, this handler
     |      will be constructed and called -- see `.SubsystemHandler` for more
     |      detailed documentation.
     |      
     |      Any extra parameters (including keyword arguments) are saved and
     |      passed to the `.SubsystemHandler` constructor later.
     |      
     |      :param str name: name of the subsystem.
     |      :param class handler:
     |          subclass of `.SubsystemHandler` that handles this subsystem.
     |  
     |  ssttaarrtt__cclliieenntt(self, event=None)
     |      Negotiate a new SSH2 session as a client.  This is the first step after
     |      creating a new `.Transport`.  A separate thread is created for protocol
     |      negotiation.
     |      
     |      If an event is passed in, this method returns immediately.  When
     |      negotiation is done (successful or not), the given ``Event`` will
     |      be triggered.  On failure, `is_active` will return ``False``.
     |      
     |      (Since 1.4) If ``event`` is ``None``, this method will not return until
     |      negotation is done.  On success, the method returns normally.
     |      Otherwise an SSHException is raised.
     |      
     |      After a successful negotiation, you will usually want to authenticate,
     |      calling `auth_password <Transport.auth_password>` or
     |      `auth_publickey <Transport.auth_publickey>`.
     |      
     |      .. note:: `connect` is a simpler method for connecting as a client.
     |      
     |      .. note::
     |          After calling this method (or `start_server` or `connect`), you
     |          should no longer directly read from or write to the original socket
     |          object.
     |      
     |      :param .threading.Event event:
     |          an event to trigger when negotiation is complete (optional)
     |      
     |      :raises SSHException: if negotiation fails (and no ``event`` was passed
     |          in)
     |  
     |  ssttaarrtt__sseerrvveerr(self, event=None, server=None)
     |      Negotiate a new SSH2 session as a server.  This is the first step after
     |      creating a new `.Transport` and setting up your server host key(s).  A
     |      separate thread is created for protocol negotiation.
     |      
     |      If an event is passed in, this method returns immediately.  When
     |      negotiation is done (successful or not), the given ``Event`` will
     |      be triggered.  On failure, `is_active` will return ``False``.
     |      
     |      (Since 1.4) If ``event`` is ``None``, this method will not return until
     |      negotation is done.  On success, the method returns normally.
     |      Otherwise an SSHException is raised.
     |      
     |      After a successful negotiation, the client will need to authenticate.
     |      Override the methods `get_allowed_auths
     |      <.ServerInterface.get_allowed_auths>`, `check_auth_none
     |      <.ServerInterface.check_auth_none>`, `check_auth_password
     |      <.ServerInterface.check_auth_password>`, and `check_auth_publickey
     |      <.ServerInterface.check_auth_publickey>` in the given ``server`` object
     |      to control the authentication process.
     |      
     |      After a successful authentication, the client should request to open a
     |      channel.  Override `check_channel_request
     |      <.ServerInterface.check_channel_request>` in the given ``server``
     |      object to allow channels to be opened.
     |      
     |      .. note::
     |          After calling this method (or `start_client` or `connect`), you
     |          should no longer directly read from or write to the original socket
     |          object.
     |      
     |      :param .threading.Event event:
     |          an event to trigger when negotiation is complete.
     |      :param .ServerInterface server:
     |          an object used to perform authentication and create `channels
     |          <.Channel>`
     |      
     |      :raises SSHException: if negotiation fails (and no ``event`` was passed
     |          in)
     |  
     |  ssttoopp__tthhrreeaadd(self)
     |  
     |  uussee__ccoommpprreessssiioonn(self, compress=True)
     |      Turn on/off compression.  This will only have an affect before starting
     |      the transport (ie before calling `connect`, etc).  By default,
     |      compression is off since it negatively affects interactive sessions.
     |      
     |      :param bool compress:
     |          ``True`` to ask the remote client/server to compress traffic;
     |          ``False`` to refuse compression
     |      
     |      .. versionadded:: 1.5.2
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  llooaadd__sseerrvveerr__mmoodduullii(filename=None)
     |      (optional)
     |      Load a file of prime moduli for use in doing group-exchange key
     |      negotiation in server mode.  It's a rather obscure option and can be
     |      safely ignored.
     |      
     |      In server mode, the remote client may request "group-exchange" key
     |      negotiation, which asks the server to send a random prime number that
     |      fits certain criteria.  These primes are pretty difficult to compute,
     |      so they can't be generated on demand.  But many systems contain a file
     |      of suitable primes (usually named something like ``/etc/ssh/moduli``).
     |      If you call `load_server_moduli` and it returns ``True``, then this
     |      file of primes has been loaded and we will support "group-exchange" in
     |      server mode.  Otherwise server mode will just claim that it doesn't
     |      support that method of key negotiation.
     |      
     |      :param str filename:
     |          optional path to the moduli file, if you happen to know that it's
     |          not in a standard location.
     |      :return:
     |          True if a moduli file was successfully loaded; False otherwise.
     |      
     |      .. note:: This has no effect when used in client mode.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from threading.Thread:
     |  
     |  ggeettNNaammee(self)
     |  
     |  iissAAlliivvee(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  iissDDaaeemmoonn(self)
     |  
     |  iiss__aalliivvee = isAlive(self)
     |      Return whether the thread is alive.
     |      
     |      This method returns True just before the run() method starts until just
     |      after the run() method terminates. The module function enumerate()
     |      returns a list of all alive threads.
     |  
     |  jjooiinn(self, timeout=None)
     |      Wait until the thread terminates.
     |      
     |      This blocks the calling thread until the thread whose join() method is
     |      called terminates -- either normally or through an unhandled exception
     |      or until the optional timeout occurs.
     |      
     |      When the timeout argument is present and not None, it should be a
     |      floating point number specifying a timeout for the operation in seconds
     |      (or fractions thereof). As join() always returns None, you must call
     |      isAlive() after join() to decide whether a timeout happened -- if the
     |      thread is still alive, the join() call timed out.
     |      
     |      When the timeout argument is not present or None, the operation will
     |      block until the thread terminates.
     |      
     |      A thread can be join()ed many times.
     |      
     |      join() raises a RuntimeError if an attempt is made to join the current
     |      thread as that would cause a deadlock. It is also an error to join() a
     |      thread before it has been started and attempts to do so raises the same
     |      exception.
     |  
     |  sseettDDaaeemmoonn(self, daemonic)
     |  
     |  sseettNNaammee(self, name)
     |  
     |  ssttaarrtt(self)
     |      Start the thread's activity.
     |      
     |      It must be called at most once per thread object. It arranges for the
     |      object's run() method to be invoked in a separate thread of control.
     |      
     |      This method will raise a RuntimeError if called more than once on the
     |      same thread object.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading.Thread:
     |  
     |  ddaaeemmoonn
     |      A boolean value indicating whether this thread is a daemon thread (True) or not (False).
     |      
     |      This must be set before start() is called, otherwise RuntimeError is
     |      raised. Its initial value is inherited from the creating thread; the
     |      main thread is not a daemon thread and therefore all threads created in
     |      the main thread default to daemon = False.
     |      
     |      The entire Python program exits when no alive non-daemon threads are
     |      left.
     |  
     |  iiddeenntt
     |      Thread identifier of this thread or None if it has not been started.
     |      
     |      This is a nonzero integer. See the thread.get_ident() function. Thread
     |      identifiers may be recycled when a thread exits and another thread is
     |      created. The identifier is available even after the thread has exited.
     |  
     |  nnaammee
     |      A string used for identification purposes only.
     |      
     |      It has no semantics. Multiple threads may be given the same name. The
     |      initial name is set by the constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from threading._Verbose:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from paramiko.util.ClosingContextManager:
     |  
     |  ____eenntteerr____(self)
     |  
     |  ____eexxiitt____(self, type, value, traceback)
    
    class WWaarrnniinnggPPoolliiccyy(MissingHostKeyPolicy)
     |  Policy for logging a Python-style warning for an unknown host key, but
     |  accepting it. This is used by `.SSHClient`.
     |  
     |  Method resolution order:
     |      WarningPolicy
     |      MissingHostKeyPolicy
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  mmiissssiinngg__hhoosstt__kkeeyy(self, client, hostname, key)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MissingHostKeyPolicy:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)

DDAATTAA
    ____aallll____ = ['Transport', 'SSHClient', 'MissingHostKeyPolicy', 'AutoAddP...
    ____aauutthhoorr____ = 'Jeff Forcier <jeff@bitprophet.org>'
    ____lliicceennssee____ = 'GNU Lesser General Public License (LGPL)'
    ____vveerrssiioonn____ = '1.16.0'
    ____vveerrssiioonn__iinnffoo____ = (1, 16, 0)
    iioo__sslleeeepp = 0.01

VVEERRSSIIOONN
    1.16.0

AAUUTTHHOORR
    Jeff Forcier <jeff@bitprophet.org>

